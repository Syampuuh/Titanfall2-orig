global function ShSpectreChatter_MP_Init
global function ShouldPlaySpectreChatterMPLine

global const SPECTRE_CHATTER_MP_RANGE = 1000
global const SPECTRE_CHATTER_MP_RANGE_SQUARED = SPECTRE_CHATTER_MP_RANGE * SPECTRE_CHATTER_MP_RANGE

void function ShSpectreChatter_MP_Init()
{
	var dataTable = GetDataTable( $"datatable/spectre_chatter_mp.rpak" )
	int numRows = GetDatatableRowCount( dataTable )
	for ( int i = 0; i < numRows; i++ )
	{
		string conversationName = GetDataTableString( dataTable, i, GetDataTableColumnByName( dataTable, "conversationname" ) )
		int priority = GetDataTableInt( dataTable, i, GetDataTableColumnByName( dataTable, "priority" ) )
		float debounce = GetDataTableFloat( dataTable, i, GetDataTableColumnByName( dataTable, "debounce" ) )

		Assert( !(conversationName in level.Conversations ), "Already tried to register conversation: " + conversationName )

		RegisterConversation( conversationName, priority, debounce )
	}
}

bool function ShouldPlaySpectreChatterMPLine( string conversationType, entity player, entity spectre )
{
	if ( !IsAlive( spectre ) )
		return false

	if ( !IsAlive( player ) )
		return false

	if ( IsForcedDialogueOnly( player ) )
	{
		//printt( "ForcedDialogueOnly, not playing Spectre Chatter MP:"  + conversationType )
		return false
	}

	#if CLIENT
		float debounceTime = GetConversationDebounce( conversationType )
		float lastPlayedTime = GetConversationLastPlayedTime( conversationType )
		if ( lastPlayedTime > 0 && lastPlayedTime + debounceTime > Time() )
		{
			//printt( "lastPlayedTime: " + lastPlayedTime + " debounce time: " + debounceTime + ", not playing Spectre Chatter MP:"  + conversationType )
			return false
		}
	#endif

	float distSqr = DistanceSqr( spectre.GetOrigin(), player.GetOrigin() )

	if  ( distSqr > SPECTRE_CHATTER_MP_RANGE_SQUARED )
	{
		//printt( "DistanceSqr: " + distSqr + " larger than SPECTRE_CHATTER_MP_RANGE_SQUARED: " + SPECTRE_CHATTER_MP_RANGE_SQUARED + ", not playing Battle Chatter:"  + conversationType )
		return false
	}

	return true

}
