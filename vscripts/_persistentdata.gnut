
globalize_all_functions

const int STARTING_CREDITS = 20

#if SERVER
void function InitPersistentData( entity player )
{
#if MP
	int initializedVersion = player.GetPersistentVarAsInt( "initializedVersion" )

	if ( initializedVersion != PERSISTENCE_INIT_VERSION )
	{
		//printt( "======================================================================================="  )
		//printt( "Setting persistent data defaults ======================================================"  )
		//printt( "======================================================================================="  )

		// TODO: REPLACE THIS WITH A DATA DRIVEN SOURCE

		SetPersistentLoadoutsToDefaults( player ) // Should only be called once
		SetPersistentUnlocksToDefaults( player )
		InitBurnMeterPersistentData( player )

		InitFactionDialoguePersistence( player )

		// Set player, titan and weapon xp to max level
		player.SetPersistentVar( "xp", 0 )
		player.SetPersistentVar( "previousXP", 0 )
		player.SetPersistentVar( "gen", 1 )
		player.XPChanged()

		SetAvailableCredits( player, STARTING_CREDITS )

		player.SetPersistentVar( "activeCallsignIconIndex", 56 ) // hardcoded to the "Titanfall A"

		CallingCard callingCard = CallingCard_GetByRef( "callsign_16_col" )
		player.SetPersistentVar( "activeCallingCardIndex", callingCard.index ) // hardcoded to the some arbitrary thing


		ResetPlayerProgression( player )

		//array<string> itemRefs = GetAllItemRefsOfType( eItemTypes.PILOT_PRIMARY )
		//itemRefs.extend( GetAllItemRefsOfType( eItemTypes.PILOT_SECONDARY ) )
		//itemRefs.extend( GetAllItemRefsOfType( eItemTypes.TITAN_PRIMARY ) )
		//foreach ( itemRef in itemRefs )
		//{
		//	string persistenceVar = GetItemPersistenceStruct( itemRef ) + ".weaponXP"
		//	player.SetPersistentVar( persistenceVar, 2147483647 ) //WeaponGetMaxXP( itemRef ) )
		//
		//	persistenceVar = GetItemPersistenceStruct( itemRef ) + ".unlockedMods"
		//	player.SetPersistentVar( persistenceVar, 2147483647 )
		//}
		//
		int arrayCount = PersistenceGetArrayCount( "pilotWeapons" )
		for ( int i = 0; i < arrayCount; i++ )
		{
			player.SetPersistentVar( "pilotWeapons[" + i + "].weaponXP", 0 )
			player.SetPersistentVar( "pilotWeapons[" + i + "].previousWeaponXP", 0 )
			player.SetPersistentVar( "pilotWeapons[" + i + "].newMods", 0 )
			player.SetPersistentVar( "pilotWeapons[" + i + "].unlockedMods", 0 )
			{
				int unlockArrayCount = PersistenceGetArrayCount( "pilotWeapons[" + i + "].newWeaponSkins" )
				for ( int j = 0; j < unlockArrayCount; j++ )
				{
					player.SetPersistentVar( "pilotWeapons[" + i + "].newWeaponSkins[" + j + "]", 0 )
				}
			}
			{
				int unlockArrayCount = PersistenceGetArrayCount( "pilotWeapons[" + i + "].newWeaponSkins" )
				for ( int j = 0; j < unlockArrayCount; j++ )
				{
					player.SetPersistentVar( "pilotWeapons[" + i + "].unlockedWeaponSkins[" + j + "]", 0 )
				}
			}
		}

		{
			int enumCount =	PersistenceGetEnumCount( "titanClasses" )
			for ( int i = 0; i < enumCount; i++ )
			{
				string enumName = PersistenceGetEnumItemNameForIndex( "titanClasses", i )
				if ( enumName != "" )
				{
					player.SetPersistentVar( "titanXP[" + enumName + "]", 0 )
					player.SetPersistentVar( "previousTitanXP[" + enumName + "]", 0 )
				}
			}
		}

		{
			int enumCount =	PersistenceGetEnumCount( "faction" )
			for ( int i = 0; i < enumCount; i++ )
			{
				string enumName = PersistenceGetEnumItemNameForIndex( "faction", i )
				if ( enumName != "" )
				{
					player.SetPersistentVar( "factionXP[" + enumName + "]", 0 )
					player.SetPersistentVar( "previousFactionXP[" + enumName + "]", 0 )
				}
			}
		}
	}
	else if ( player.GetPersistentVarAsInt( TEMP_NETWORTH_VAR ) == 0 ) // Handle cases for players that played before "netWorth" existed
	{
		int netWorth = player.GetPersistentVarAsInt( "xp" )
		netWorth +=	GetMaxPlayerXP() * (player.GetPersistentVarAsInt( "gen" ) - 1)
		netWorth += STARTING_CREDITS

		player.SetPersistentVar( TEMP_NETWORTH_VAR, netWorth )
	}

	player.SetPersistentVar( "initializedVersion", PERSISTENCE_INIT_VERSION )
	player.SetPersistentVar( "spawnAsTitan", false )
#endif // MP
}

void function ResetPlayerProgression( entity player )
{
	SetPersistentUnlocksToDefaults( player )

	// Set player and weapons to max level
	player.SetPersistentVar( "xp", 0 )
	player.SetPersistentVar( "previousXP", 0 )
	player.XPChanged()

	array<string> itemRefs = GetAllItemRefsOfType( eItemTypes.PILOT_PRIMARY )
	itemRefs.extend( GetAllItemRefsOfType( eItemTypes.PILOT_SECONDARY ) )
	itemRefs.extend( GetAllItemRefsOfType( eItemTypes.TITAN_PRIMARY ) )
	foreach ( itemRef in itemRefs )
	{
		string persistenceVar = GetItemPersistenceStruct( itemRef ) + ".weaponXP"
		player.SetPersistentVar( persistenceVar, 0 )

		persistenceVar = GetItemPersistenceStruct( itemRef ) + ".unlockedMods"
		player.SetPersistentVar( persistenceVar, 0 )
	}
}

void function SetPersistentLoadoutsToDefaults( entity player )
{
	for ( int i = 0; i < NUM_PERSISTENT_PILOT_LOADOUTS; i++ )
		SetPersistentPilotLoadout( player, i, GetDefaultPilotLoadout( i ) )

	for ( int i = 0; i < NUM_PERSISTENT_TITAN_LOADOUTS; i++ )
		SetPersistentTitanLoadout( player, i, GetDefaultTitanLoadout( i ) )
}

void function SetPersistentUnlocksToDefaults( entity player )
{
	array<string> itemRefs = GetAllItemRefsOfType( eItemTypes.PILOT_PRIMARY )
	itemRefs.extend( GetAllItemRefsOfType( eItemTypes.PILOT_SECONDARY ) )
	itemRefs.extend( GetAllItemRefsOfType( eItemTypes.TITAN_PRIMARY ) )

	foreach ( itemRef in itemRefs )
	{
		//if ( IsItemLockedForLevel( player, itemRef ) )
		//	LockItem( player, itemRef, "")
		//else
		//	UnlockItem( player, itemRef, "", false )
		//
		//array<string> subRefs = GetAllSubitemRefs( itemRef )
		//
		//foreach ( subRef in subRefs )
		//{
		//	if ( IsItemLockedForLevel( player, itemRef, subRef ) )
		//		LockItem( player, itemRef, subRef )
		//	else
		//		UnlockItem( player, itemRef, subRef, false )
		//}
	}
}

// Get a script array from a persistent int array
array<int> function GetPersistentIntArray( entity player, string variableName )
{
	array<int> Array
	int size = PersistenceGetArrayCount( variableName )

	for ( int i = 0; i < size; i++ )
	{
		int element = player.GetPersistentVarAsInt( variableName + "[" + i + "]" )

		Array.append( element )
	}

	return Array
}

// Sets element values in a persistent array from a script array. Modifies elements up to the size of the script array, but not more than the persistent array size.
void function SetPersistentIntArray( entity player, string variableName, array<int> Array )
{
	int size = PersistenceGetArrayCount( variableName )

	for ( int i = 0; i < size; i++ )
	{
		if ( i >= Array.len() )
			break

		player.SetPersistentVar( variableName + "[" + i + "]", Array[i] )
	}
}

void function SetAchievement( entity player, string achievementName, bool state )
{

}

bool function GetAchievement( entity player, string achievementName )
{
	return false
}

void function SetPersistenceBitfield( entity player, string persistenceVar, int bitIndex, int value )
{
	Assert( value == 0 || value == 1 )

	int arrayIndex = bitIndex / 32;
	int bitOffset = bitIndex % 32;

	int decimalValue = 1 << bitOffset

	Assert( arrayIndex < PersistenceGetArrayCount( persistenceVar ), "Need to increase the array size of the persistenceVar " + persistenceVar )
	persistenceVar = persistenceVar + "[" + arrayIndex + "]"

	int currentVal = player.GetPersistentVarAsInt( persistenceVar )
	if ( value == 0 )
		player.SetPersistentVar( persistenceVar, currentVal & ~decimalValue )
	else
		player.SetPersistentVar( persistenceVar, currentVal | decimalValue )
}

#endif // SERVER

bool function IsPersistenceBitSet( entity player, string persistenceVar, int bitIndex )
{
	int arrayIndex = bitIndex / 32;
	int bitOffset = bitIndex % 32;

	int decimalValue = 1 << bitOffset

	Assert( arrayIndex < PersistenceGetArrayCount( persistenceVar ), "Need to increase the array size of the persistenceVar " + persistenceVar )
	persistenceVar = persistenceVar + "[" + arrayIndex + "]"

	return ( ( player.GetPersistentVarAsInt( persistenceVar ) & decimalValue ) != 0 )
}

bool function IsAnyPersistenceBitSet( entity player, string persistenceVar )
{
	int arrayCount = PersistenceGetArrayCount( persistenceVar )
	for ( int i = 0; i < arrayCount; i++ )
	{
#if UI
		if ( GetCachedNewItemsVar( persistenceVar + "[" + i + "]" ) > 0 )
			return true
#else
		if ( player.GetPersistentVarAsInt( persistenceVar + "[" + i + "]" ) > 0 )
			return true
#endif
	}

	return false
}
