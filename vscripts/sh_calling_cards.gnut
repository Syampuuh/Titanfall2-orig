global function ShCallingCards_Init

global function PlayerCallingCard_GetActive
global function PlayerCallingCard_GetActiveIndex

global function CallingCard_GetRef
global function CallingCard_GetImage
global function CallingCards_GetCount
global function CallingCard_GetByIndex
global function CallingCard_GetByRef

global function PlayerCallsignIcon_GetActive
global function PlayerCallsignIcon_GetActiveIndex

global function CallsignIcon_GetRef
global function CallsignIcon_GetImage
global function CallingCard_GetLayout
global function CallsignIcon_GetSmallImage
global function CallsignIcons_GetCount
global function CallsignIcon_GetByIndex
global function CallsignIcon_GetByRef

#if SERVER
	global function PlayerCallingCard_SetActive
	global function PlayerCallsignIcon_SetActive
	global function PlayerCallingCard_SetActiveByRef
	global function PlayerCallsignIcon_SetActiveByRef
#endif

global struct CallingCard
{
	int index = -1
	string ref = ""
	asset image = $""
	int layoutType = 0
}

global struct CallsignIcon
{
	int index = -1
	string ref = ""
	asset image = $""
	asset smallImage = $""
	int layoutType = 0
}

struct
{
	table<string, CallingCard> callingCards
	array<string> callingCardRefs

	table<string, CallsignIcon> callsignIcons
	array<string> callsignIconRefs

	int nextCallingCardIndex = 0
	int nextCallsignIconIndex = 0
} file

void function ShCallingCards_Init()
{
	bool initialized = ( file.callingCardRefs.len() > 0 )

	if ( !initialized )
	{
		var dataTable = GetDataTable( $"datatable/calling_cards.rpak" )
		for ( int row = 0; row < GetDatatableRowCount( dataTable ); row++ )
		{
			string cardRef = GetDataTableString( dataTable, row, GetDataTableColumnByName( dataTable, CALLING_CARD_REF_COLUMN_NAME ) )
			asset image = GetDataTableAsset( dataTable, row, GetDataTableColumnByName( dataTable, CALLING_CARD_IMAGE_COLUMN_NAME ) )
			int layoutType = GetDataTableInt( dataTable, row, GetDataTableColumnByName( dataTable, CALLING_CARD_LAYOUT_COLUMN_NAME ) )

			CallingCard callingCard
			callingCard.ref = cardRef
			callingCard.image = image
			callingCard.index = row
			callingCard.layoutType = layoutType

			file.callingCards[cardRef] <- callingCard
			file.callingCardRefs.append( cardRef )
		}
	}

	if ( !initialized )
	{
		var dataTable = GetDataTable( $"datatable/callsign_icons.rpak" )
		for ( int row = 0; row < GetDatatableRowCount( dataTable ); row++ )
		{
			string iconRef = GetDataTableString( dataTable, row, GetDataTableColumnByName( dataTable, CALLSIGN_ICON_REF_COLUMN_NAME ) )
			asset image = GetDataTableAsset( dataTable, row, GetDataTableColumnByName( dataTable, CALLSIGN_ICON_IMAGE_COLUMN_NAME ) )
			asset smallImage = GetDataTableAsset( dataTable, row, GetDataTableColumnByName( dataTable, CALLSIGN_ICON_SMALL_IMAGE_COLUMN_NAME ) )

			CallsignIcon callsignIcon
			callsignIcon.ref = iconRef
			callsignIcon.image = image
			callsignIcon.smallImage = smallImage
			callsignIcon.index = row

			file.callsignIcons[iconRef] <- callsignIcon
			file.callsignIconRefs.append( iconRef )
		}
	}

	#if SERVER
	AddCallback_OnClientConnecting( OnClientConnecting )
	AddCallback_OnTitanBecomesPilot( OnClassChangeBecomePilot )
	AddCallback_OnPilotBecomesTitan( OnClassChangeBecomeTitan )
	#endif
}

#if SERVER
void function OnClientConnecting( entity player )
{
	// initialize the persistent network vars
	PlayerCallingCard_SetActive( player, PlayerCallingCard_GetActive( player ) )

	CallsignIcon callsignIcon = PlayerCallsignIcon_GetActive( player )

	PlayerCallsignIcon_SetActive( player, callsignIcon )
	player.SetTargetInfoIcon( callsignIcon.smallImage )
}
#endif

#if DEV
CallingCard function DEV_GetNextCallingCard()
{
	int index = file.nextCallingCardIndex
	printt( "using CallingCard index", index )
	file.nextCallingCardIndex++
	file.nextCallingCardIndex = file.nextCallingCardIndex % file.callingCardRefs.len()

	string ref = file.callingCardRefs[index]
	return file.callingCards[ref]
}

CallsignIcon function DEV_GetNextCallsignIcon()
{
	int index = file.nextCallsignIconIndex
	printt( "using CallsignIcon index", index )
	file.nextCallsignIconIndex++
	file.nextCallsignIconIndex = file.nextCallsignIconIndex % file.callsignIconRefs.len()

	string ref = file.callsignIconRefs[index]
	return file.callsignIcons[ref]
}
#endif

int function PlayerCallingCard_GetActiveIndex( entity player )
{
	#if CLIENT
		int index
		if ( player != GetLocalClientPlayer() )
			index = player.GetPlayerNetInt( "activeCallingCardIndex" )
		else
			index = player.GetPersistentVarAsInt( "activeCallingCardIndex" )
	#else
		int index = player.GetPersistentVarAsInt( "activeCallingCardIndex" )
	#endif
	return index
}

CallingCard function PlayerCallingCard_GetActive( entity player )
{
	int index = PlayerCallingCard_GetActiveIndex( player )
	string ref = file.callingCardRefs[index]
	return file.callingCards[ref]
}

string function CallingCard_GetRef( CallingCard callingCard )
{
	return callingCard.ref
}

asset function CallingCard_GetImage( CallingCard callingCard )
{
	return callingCard.image
}

int function CallingCard_GetLayout( CallingCard callingCard )
{
	return callingCard.layoutType
}

int function CallingCards_GetCount()
{
	return file.callingCards.len()
}

CallingCard function CallingCard_GetByIndex( int index )
{
	// JFS: handle players with invalid indices
	//Assert( index < CallingCards_GetCount() )
	if ( index > file.callingCards.len() )
		return file.callingCards["callsign_16_col"]

	return file.callingCards[file.callingCardRefs[index]]
}

CallingCard function CallingCard_GetByRef( string ref )
{
	return file.callingCards[ref]
}


int function PlayerCallsignIcon_GetActiveIndex( entity player )
{
	#if CLIENT
		int index
		if ( player != GetLocalClientPlayer() )
			index = player.GetPlayerNetInt( "activeCallsignIconIndex" )
		else
			index = player.GetPersistentVarAsInt( "activeCallsignIconIndex" )
	#else
		int index = player.GetPersistentVarAsInt( "activeCallsignIconIndex" )
	#endif
	return index
}

CallsignIcon function PlayerCallsignIcon_GetActive( entity player )
{
	int index = PlayerCallsignIcon_GetActiveIndex( player )
	string ref = file.callsignIconRefs[index]
	return file.callsignIcons[ref]
}

string function CallsignIcon_GetRef( CallsignIcon callsignIcon )
{
	return callsignIcon.ref
}

asset function CallsignIcon_GetImage( CallsignIcon callsignIcon )
{
	return callsignIcon.image
}

asset function CallsignIcon_GetSmallImage( CallsignIcon callsignIcon )
{
	return callsignIcon.smallImage
}

int function CallsignIcons_GetCount()
{
	return file.callsignIcons.len()
}

CallsignIcon function CallsignIcon_GetByIndex( int index )
{
	// JFS: handle players with invalid indices
	// Assert( index < CallsignIcons_GetCount() )

	if ( index >= file.callsignIconRefs.len() )
		index = 0

	return file.callsignIcons[file.callsignIconRefs[index]]
}

CallsignIcon function CallsignIcon_GetByRef( string ref )
{
	return file.callsignIcons[ref]
}


#if SERVER
void function PlayerCallingCard_SetActiveByIndex( entity player, int index )
{
	if ( player.GetPersistentVarAsInt( "activeCallingCardIndex" ) != index )
		player.SetCallingCard( index )

	player.SetPlayerNetInt( "activeCallingCardIndex", index )
	player.SetPersistentVar( "activeCallingCardIndex", index )
}

void function PlayerCallingCard_SetActive( entity player, CallingCard callingCard )
{
	PlayerCallingCard_SetActiveByIndex( player, callingCard.index )
}

void function PlayerCallingCard_SetActiveByRef( entity player, string ref )
{
	PlayerCallingCard_SetActiveByIndex( player, file.callingCards[ref].index )
}

void function PlayerCallsignIcon_SetActiveByIndex( entity player, int index )
{
	if ( player.GetPersistentVarAsInt( "activeCallsignIconIndex" ) != index )
		player.SetCallSign( index )

	player.SetPlayerNetInt( "activeCallsignIconIndex", index )
	player.SetPersistentVar( "activeCallsignIconIndex", index )
}

void function PlayerCallsignIcon_SetActive( entity player, CallsignIcon callsignIcon )
{
	PlayerCallsignIcon_SetActiveByIndex( player, callsignIcon.index )
}

void function PlayerCallsignIcon_SetActiveByRef( entity player, string ref )
{
	PlayerCallsignIcon_SetActiveByIndex( player, file.callsignIcons[ref].index )
}

void function OnClassChangeBecomePilot( entity player, entity titan )
{
	CallsignIcon callsignIcon = PlayerCallsignIcon_GetActive( player )
	player.SetTargetInfoIcon( callsignIcon.smallImage )
}

void function OnClassChangeBecomeTitan( entity player, entity titan )
{
	string titanRef = GetTitanCharacterNameFromSetFile( player.GetPlayerSettings() )
	player.SetTargetInfoIcon( GetTitanCoreIcon( titanRef ) )
}

#endif