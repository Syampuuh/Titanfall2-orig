// TODO:
// Model tracking and save/Clear functions are temp. We already update the client knowledge of loadouts. Derive from that.
// Move the struct off the player?

#if CLIENT && MP
	untyped
#endif //client && MP

#if CLIENT
	const DEFAULT_FOV = 50.0
	const DEFAULT_DOF_NEAR_START = 7.5
	const DEFAULT_DOF_NEAR_END = 7.7
	const DEFAULT_DOF_FAR_START = 200.0
	const DEFAULT_DOF_FAR_END = 300.0
	const TRANSITION_DURATION = 0.25

	const DEFAULT_MAX_TURN_SPEED = 270.0
	const PILOT_MAX_TURN_SPEED = 270.0
	const TITAN_MAX_TURN_SPEED = 100.0

	const MENU_COLOR_CORRECTION = "materials/correction/menu.raw"
	const MENU_TEST_EFFECT = $"P_menu_motes"

	struct CharacterData
	{
		entity mover
		entity body
		entity weapon
		entity prop
		string attachName
		string bodyAnim
		float rotationDelta
		float maxTurnSpeed = DEFAULT_MAX_TURN_SPEED
	}

	struct PresentationDef
	{
		CharacterData ornull characterData = null
		float maxTurnDegrees = 360.0
		string sceneAnim

		float fov
		float dofNearStart
		float dofNearEnd
		float dofFarStart
		float dofFarEnd

		float csmTexelScale1
		float csmTexelScale2
		float csmStartDistance

		string pilotAnimType
		string titanAnimType

		bool showCallsign
		bool showStoreBackground
		bool showStorePrimeBg
		void functionref() activateFunc
	}

	struct
	{
		entity sceneRef
		entity cameraTarget
		float mouseRotateDelta

		CharacterData menuPilot
		CharacterData menuTitan
		CharacterData menuFaction
		CharacterData menuBoost
		CharacterData ornull activeCharacter = null
		var menuCallsignRui
		var menuCallsignTopo
		var menuStoreBackground
		var menuStorePrimeBg
		var menuStorePrimeBgRui
		var menuStorePrimeBgCreated

		int presentationType = ePresentationType.INACTIVE
		bool presentationTypeInitialized = false
		PresentationDef[ePresentationType.COUNT] presentationData

		table< string, table<string, table<int,string> > > pilotAnims
		table< string, table<string, string> > titanAnims

		int menuColorCorrection = -1
	} file

	global function MenuModels_Init
	global function MenuMapEntitiesExist
#endif //CLIENT

#if CLIENT && MP
	global function SetPresentationType

	global function UpdatePilotModel
	global function UpdateTitanModel
	global function UpdateFactionModel
	global function UpdateBoostModel
	global function UpdateStoreBackground
	global function UpdateStorePrimeBg
	global function UpdateCallsignCard
	global function UpdateCallsignIcon
	global function UpdateCallsign

	global function SetEditingPilotLoadoutIndex
	global function ClearEditingPilotLoadoutIndex

	global function SetHeldPilotWeaponType

	global function SetEditingTitanLoadoutIndex
	global function ClearEditingTitanLoadoutIndex

	global function PreviewPilotCharacter
	global function SavePilotCharacterPreview
	global function PreviewPilotWeapon
	global function SavePilotWeaponPreview
	global function PreviewPilotWeaponCamoChange
	global function ClearAllPilotPreview

    global function PreviewPilotWeaponMod
    global function SavePilotWeaponModPreview

	global function PreviewPilotCamoChange
	global function SavePilotCamoPreview

	global function PreviewTitanCamoChange
	global function SaveTitanCamoPreview
	global function ClearTitanCamoPreview

	global function PreviewTitanSkinChange
	global function SaveTitanSkinPreview
	global function ClearTitanSkinPreview

	global function PreviewTitanDecalChange
	global function SaveTitanDecalPreview
	global function ClearTitanDecalPreview

	global function PreviewTitanWeaponCamoChange
	global function ClearAllTitanPreview

	global function SetMenuOpenState

	// Only these 2 functions are run from the server and they may not be needed. Remove server updates if possible.
	global function ServerCallback_UpdatePilotModel
	global function ServerCallback_UpdateTitanModel

	global function GetMenuPilotBody
	global function GetCallsignTopo

	global function GetFactionModel // TEMP

	global function UpdateMouseRotateDelta
#endif // CLIENT && MP

#if UI
	const MOUSE_ROTATE_MULTIPLIER = 25.0

	global function UpdateUIMapSupportsMenuModels
	global function RunMenuClientFunction
	global function UI_SetPresentationType

	global function UICodeCallback_MouseMovementCapture
#endif // UI

	global const STORE_BG_DEFAULT = 0
	global const STORE_BG_BUNDLE1 = 1
	global const STORE_BG_BUNDLE2 = 2

#if CLIENT

	var function GetCallsignTopo()
	{
		return file.menuCallsignTopo
	}

	entity function GetMenuPilotBody()
	{
		return file.menuPilot.body
	}

    void function MenuModels_Init()
    {
	    if ( IsMultiplayer() && MenuMapEntitiesExist() )
		    clGlobal.mapSupportsMenuModels = true

	    RunUIScript( "UpdateUIMapSupportsMenuModels", clGlobal.mapSupportsMenuModels )

	    if ( !clGlobal.mapSupportsMenuModels )
		    return

		#if MP
			PrecacheParticleSystem( MENU_TEST_EFFECT )
			file.menuColorCorrection = ColorCorrection_Register( MENU_COLOR_CORRECTION )

			InitPresentationData()
			InitMenuModelAnims()
			thread InitMenuEntities( GetLocalClientPlayer() )
			thread ModelRotationThread()
			AddCallback_OnClientScriptInit( OnClientScriptInit )
		#endif // MP

		RegisterSignal( "UpdateCallsign" )
    }

	bool function MenuMapEntitiesExist()
	{
		array<string> entNames =
		[
			"menu_scene_ref",
			"menu_camera_target"
		]

		foreach ( name in entNames )
		{
			if ( GetEntArrayByScriptName( name ).len() != 1 )
				return false
		}

		return true
	}
#endif // CLIENT

#if UI
	void function UpdateUIMapSupportsMenuModels( bool value )
	{
		uiGlobal.mapSupportsMenuModels = value
		uiGlobal.mapSupportsMenuModelsUpdated = true

		printt( Time(), "uiGlobal.mapSupportsMenuModelsUpdated set to: true" )
	}
#endif // UI

#if CLIENT && MP
	void function InitPresentationData()
	{
		// TODO: Need anims happening a bit differently for transition support
		// Interruptable function that plays intro anim and then idle if intro completes uninterrupted
		// Outro anims should work the same

		SetPresentationData( ePresentationType.INACTIVE, 			null,				false,	false,	false, 360, "camera_menu_main_idle_01", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, DEFAULT_DOF_FAR_START, DEFAULT_DOF_FAR_END, 1.0,  1.0,  0.0,   "main_idle",				"background_idle",	UpdateBothModels )
		SetPresentationData( ePresentationType.DEFAULT, 			null,				true,	false,	false, 360, "camera_menu_main_idle_01", 			DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, DEFAULT_DOF_FAR_START, DEFAULT_DOF_FAR_END, 0.22, 0.55, 70.0,  "main_idle",				"background_idle",	UpdateBothModels ) // Show spawn models
		SetPresentationData( ePresentationType.STORE_CAMO_PACKS, 	null,				false,	false,	false, 360, "camera_menu_main_idle_01", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 200.0, 1000.0, 		  					   0.22, 0.55, 70.0,  "main_idle",				"background_idle",	UpdateBothModels ) // Show spawn models
		SetPresentationData( ePresentationType.STORE_FRONT, 		null,				false,	true,	false, 360, "camera_menu_settings_idle", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 2300.0, 3000.0, 1.0,  1.0,  0.0,   "main_idle",				"background_idle",	UpdateBothModels ) // Animation change
		SetPresentationData( ePresentationType.STORE_PRIME_TITANS, 	file.menuTitan,		false,	false,	true, 360, "camera_titan_menu_loadout_idle", 	DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 4000.0, 5000.0, 1.0,  1.0,  200.0, "background_idle",		"focused_idle",		UpdateBothModels ) // Animation change

		SetPresentationData( ePresentationType.SEARCH, 				null,				true,	false,	false, 360, "camera_menu_main_idle_01", 			DEFAULT_FOV + 10, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, DEFAULT_DOF_FAR_START, DEFAULT_DOF_FAR_END, 0.22, 0.55, 70.0,  "main_idle",			"background_idle",	UpdateBothModels ) // Show spawn models
		SetPresentationData( ePresentationType.CALLSIGN, 			null,				false,	false,	false, 360, "camera_menu_main_idle_01", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, DEFAULT_DOF_FAR_START, DEFAULT_DOF_FAR_END, 0.22, 0.55, 70.0,  "main_idle",				"background_idle",	UpdateBothModels ) // Show spawn models
		SetPresentationData( ePresentationType.KNOWLEDGEBASE_MAIN, 	null,				false,	false,	false, 360, "camera_menu_loadout_idle_01", 		DEFAULT_FOV - 25, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 30.0, 			  DEFAULT_DOF_FAR_END, 0.22, 0.55, 70.0,  "weapon_inspect_idle",	"background_idle",	UpdateBothModels )
		SetPresentationData( ePresentationType.KNOWLEDGEBASE_SUB, 	null,				false,	false,	false, 360, "camera_menu_loadout_idle_01", 		DEFAULT_FOV - 28, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 30.0, 			  DEFAULT_DOF_FAR_END, 0.22, 0.55, 70.0,  "weapon_inspect_idle",	"background_idle",	UpdateBothModels )

		SetPresentationData( ePresentationType.PVE_MAIN, 			null,				false,	false,	false, 360, "camera_menu_loadout_idle_01", 		DEFAULT_FOV - 25, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 30.0, 			  DEFAULT_DOF_FAR_END, 0.22, 0.55, 70.0,  "weapon_inspect_idle",	"background_idle",	UpdateBothModels )

		SetPresentationData( ePresentationType.PILOT, 				file.menuPilot,		false,	false,	false, 360, "camera_menu_loadout_idle_01", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 200.0, 				  300.0, 		       0.4,  0.55, 70.0,  "focused_idle",			"background_idle",	UpdateBothModels ) // Animation change
		SetPresentationData( ePresentationType.PILOT_LOADOUT_EDIT, 	file.menuPilot,		false,	false,	false, 360, "camera_menu_loadout_idle_01",		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 200.0, 				  300.0, 		       0.4,  0.55, 70.0,  "focused_idle",			"background_idle", 	UpdateBothModels )
		SetPresentationData( ePresentationType.PILOT_CHARACTER, 	file.menuPilot,		false,	false,	false, 360, "camera_menu_loadout_idle_01", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 200.0, 				  300.0, 		       0.4,  0.55, 70.0,  "focused_idle",			"background_idle",	UpdateBothModels ) // Animation change
		SetPresentationData( ePresentationType.PILOT_WEAPON,		file.menuPilot,		false,	false,	false, 360, "camera_menu_loadout_edit_idle_01", DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, DEFAULT_DOF_FAR_START, DEFAULT_DOF_FAR_END, 0.22, 0.55, 40.0,  "weapon_inspect_idle",	"background_idle",	UpdateBothModels ) // Animation change

		SetPresentationData( ePresentationType.TITAN, 				file.menuTitan,		false,	false,	false, 360, "camera_titan_menu_loadout_idle", 	DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 500.0, 				  1000.0, 			   1.0,  1.0,  200.0, "background_idle",		"focused_idle",		UpdateBothModels ) // Animation change
		SetPresentationData( ePresentationType.TITAN_LOADOUT_EDIT, 	file.menuTitan,		false,	false,	false, 360, "camera_titan_menu_loadout_edit", 	DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 500.0, 				  1000.0, 			   1.0,  1.0,  200.0, "background_idle",		"editing_idle", 	UpdateBothModels )
		SetPresentationData( ePresentationType.TITAN_WEAPON,	 	file.menuTitan,		false,	false,	false, 360, "camera_titan_menu_loadout_idle", 	DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 500.0, 				  1000.0, 			   1.0,  1.0,  200.0, "background_idle",		"editing_idle", 	UpdateBothModels )
		SetPresentationData( ePresentationType.TITAN_NOSE_ART, 		file.menuTitan,		false,	false,	false, 100, "camera_menu_noseart_idle", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, 500.0, 				  1000.0, 			   1.0,  1.0,  200.0, "background_idle",		"nose_art_idle", 	UpdateBothModels ) // Titan animation change

		SetPresentationData( ePresentationType.NO_MODELS, 			null,				false,	false,	false, 360, "camera_menu_settings_idle", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, DEFAULT_DOF_FAR_START, DEFAULT_DOF_FAR_END, 1.0,  1.0,  0.0,   "main_idle",				"background_idle",	UpdateBothModels ) // Animation change
		SetPresentationData( ePresentationType.FACTIONS,			file.menuFaction,	false,	false,	false, 360, "camera_menu_faction_idle", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, DEFAULT_DOF_FAR_START, DEFAULT_DOF_FAR_END, 0.4,  0.55, 70.0,  "main_idle",				"background_idle" )
		SetPresentationData( ePresentationType.BOOSTS, 				file.menuBoost,		false,	false,	false, 360, "camera_menu_burncard_idle", 		DEFAULT_FOV, DEFAULT_DOF_NEAR_START, DEFAULT_DOF_NEAR_END, DEFAULT_DOF_FAR_START, DEFAULT_DOF_FAR_END, 1.0,  1.0,  0.0,   "main_idle",				"background_idle" )
	}

	void function SetPresentationData( int presentationType, CharacterData ornull characterData, bool showCallsign, bool showStoreBackground, bool showStorePrimeBg, float maxTurnDegrees, string sceneAnim, float fov, float dofNearStart, float dofNearEnd, float dofFarStart, float dofFarEnd, float csmTexelScale1, float csmTexelScale2, float csmStartDistance, string pilotAnimType, string titanAnimType, void functionref() activateFunc = null )
	{
		file.presentationData[ presentationType ].characterData = characterData
		file.presentationData[ presentationType ].maxTurnDegrees = maxTurnDegrees
		file.presentationData[ presentationType ].sceneAnim = sceneAnim
		file.presentationData[ presentationType ].fov = fov
		file.presentationData[ presentationType ].dofNearStart = dofNearStart
		file.presentationData[ presentationType ].dofNearEnd = dofNearEnd
		file.presentationData[ presentationType ].dofFarStart = dofFarStart
		file.presentationData[ presentationType ].dofFarEnd = dofFarEnd
		file.presentationData[ presentationType ].csmTexelScale1 = csmTexelScale1
		file.presentationData[ presentationType ].csmTexelScale2 = csmTexelScale2
		file.presentationData[ presentationType ].csmStartDistance = csmStartDistance
		file.presentationData[ presentationType ].pilotAnimType = pilotAnimType
		file.presentationData[ presentationType ].titanAnimType = titanAnimType
		file.presentationData[ presentationType ].activateFunc = activateFunc
		file.presentationData[ presentationType ].showCallsign = showCallsign
		file.presentationData[ presentationType ].showStoreBackground = showStoreBackground
		file.presentationData[ presentationType ].showStorePrimeBg = showStorePrimeBg
	}

	void function UpdateBothModels()
	{
		entity player = GetLocalClientPlayer()

		int loadoutIndex
		if ( clGlobal.editingPilotLoadoutIndex != -1 )
			loadoutIndex = clGlobal.editingPilotLoadoutIndex
		else
			loadoutIndex = GetPersistentSpawnLoadoutIndex( player, "pilot" )
		UpdatePilotModel( player, loadoutIndex )

		if ( clGlobal.editingTitanLoadoutIndex != -1 )
			loadoutIndex = clGlobal.editingTitanLoadoutIndex
		else
			loadoutIndex = GetPersistentSpawnLoadoutIndex( player, "titan" )
		UpdateTitanModel( player, loadoutIndex )
	}

	void function OnClientScriptInit( entity player )
	{
		UpdateCallsign( player )
	}

	void function InitMenuModelAnims()
	{
		string animType = "main_idle"
		file.pilotAnims[ animType ] <- {}

		string bodyType = "light"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_main_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_main_idle_01"

		bodyType = "medium"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_main_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_main_idle_01"

		bodyType = "heavy"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_main_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_main_idle_01"

		bodyType = "nomad"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_main_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_main_idle_01"

		bodyType = "stalker"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_main_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_main_idle_01"

		bodyType = "geist"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_main_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_main_idle_01"

		bodyType = "grapple"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_main_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_main_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_main_idle_01"

		animType = "background_idle"
		file.pilotAnims[ animType ] <- {}

		bodyType = "light"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_titan_menu_loadout_idle"

		bodyType = "medium"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_titan_menu_loadout_idle"

		bodyType = "heavy"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_titan_menu_loadout_idle"

		bodyType = "nomad"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_titan_menu_loadout_idle"

		bodyType = "stalker"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_titan_menu_loadout_idle"

		bodyType = "geist"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_titan_menu_loadout_idle"

		bodyType = "grapple"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_titan_menu_loadout_idle"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_titan_menu_loadout_idle"

		animType = "focused_idle"
		file.pilotAnims[ animType ] <- {}

		bodyType = "light"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_idle_01"

		bodyType = "medium"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_idle_01"

		bodyType = "heavy"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_idle_01"

		bodyType = "nomad"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_idle_01"

		bodyType = "stalker"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_idle_01"

		bodyType = "geist"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_idle_01"

		bodyType = "grapple"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_idle_01"

		animType = "weapon_inspect_idle"
		file.pilotAnims[ animType ] <- {}

		bodyType = "light"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_edit_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ]		<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ]	<- "pt_menu_loadout_edit_idle_03"

		bodyType = "medium"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_edit_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_edit_idle_03"

		bodyType = "heavy"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_edit_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_edit_idle_03"

		bodyType = "nomad"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_edit_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_edit_idle_03"

		bodyType = "stalker"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_edit_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_edit_idle_03"

		bodyType = "geist"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_edit_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_edit_idle_03"

		bodyType = "grapple"
		file.pilotAnims[ animType ][ bodyType ] <- {}
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.SMALL ] 	<- "pt_menu_loadout_edit_idle_02"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.MEDIUM ]	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.LARGE ] 	<- "pt_menu_loadout_edit_idle_01"
		file.pilotAnims[ animType ][ bodyType ][ eMenuAnimClass.CUSTOM ] 	<- "pt_menu_loadout_edit_idle_03"


		animType = "background_idle"
		file.titanAnims[ animType ] <- {}
		file.titanAnims[ animType ][ "titan_stryder_arc" ]					<- "titan_light_menu_main_idle_01"
		file.titanAnims[ animType ][ "titan_stryder_leadwall" ]				<- "titan_light_menu_main_idle_01"
		file.titanAnims[ animType ][ "titan_stryder_sniper" ]				<- "titan_light_menu_main_idle_01"
		file.titanAnims[ animType ][ "titan_stryder_northstar_prime" ]		<- "titan_light_menu_main_idle_01"
		file.titanAnims[ animType ][ "titan_atlas_tracker" ]				<- "titan_medium_menu_main_idle_01_TONE"
		file.titanAnims[ animType ][ "titan_atlas_vanguard" ]				<- "titan_medium_menu_main_idle_01_TONE"
		file.titanAnims[ animType ][ "titan_atlas_stickybomb" ]				<- "titan_medium_menu_main_idle_01"
		file.titanAnims[ animType ][ "titan_atlas_ion_prime" ]				<- "titan_medium_menu_main_idle_01"
		file.titanAnims[ animType ][ "titan_ogre_meteor" ]					<- "titan_heavy_menu_main_idle_01"
		file.titanAnims[ animType ][ "titan_ogre_scorch_prime" ]			<- "titan_heavy_menu_main_idle_01"
		file.titanAnims[ animType ][ "titan_ogre_minigun" ]					<- "titan_heavy_menu_main_idle_01_LEGION"
		file.titanAnims[ animType ][ "titan_ogre_legion_prime" ]			<- "titan_heavy_menu_main_idle_01_LEGION"
		file.titanAnims[ animType ][ "titan_ogre_fighter" ]					<- "titan_heavy_menu_main_idle_01"

		animType = "focused_idle"
		file.titanAnims[ animType ] <- {}
		file.titanAnims[ animType ][ "titan_stryder_arc" ]					<- "titan_light_menu_loadout_idle"
		file.titanAnims[ animType ][ "titan_stryder_leadwall" ]				<- "titan_light_menu_loadout_idle"
		file.titanAnims[ animType ][ "titan_stryder_sniper" ]				<- "titan_light_menu_loadout_idle_NSTAR"
		file.titanAnims[ animType ][ "titan_stryder_northstar_prime" ]		<- "titan_light_menu_loadout_idle_NSTAR"
		file.titanAnims[ animType ][ "titan_atlas_tracker" ]				<- "titan_medium_menu_loadout_idle"
		file.titanAnims[ animType ][ "titan_atlas_vanguard" ]				<- "titan_medium_menu_loadout_idle"
		file.titanAnims[ animType ][ "titan_atlas_stickybomb" ]				<- "titan_medium_menu_loadout_idle_ION"
		file.titanAnims[ animType ][ "titan_atlas_ion_prime" ]				<- "titan_medium_menu_loadout_idle_ION"
		file.titanAnims[ animType ][ "titan_ogre_meteor" ]					<- "titan_heavy_menu_loadout_idle_SCORCH"
		file.titanAnims[ animType ][ "titan_ogre_scorch_prime" ]			<- "titan_heavy_menu_loadout_idle_SCORCH"
		file.titanAnims[ animType ][ "titan_ogre_minigun" ]					<- "titan_heavy_menu_loadout_idle_LEGION"
		file.titanAnims[ animType ][ "titan_ogre_legion_prime" ]			<- "titan_heavy_menu_loadout_idle_LEGION"
		file.titanAnims[ animType ][ "titan_ogre_fighter" ]					<- "titan_heavy_menu_loadout_idle"

		animType = "editing_idle"
		file.titanAnims[ animType ] <- {}
		file.titanAnims[ animType ][ "titan_stryder_arc" ]					<- "titan_light_menu_loadout_idle_edit_NSTAR"
		file.titanAnims[ animType ][ "titan_stryder_leadwall" ]				<- "titan_light_menu_loadout_idle_edit_RONIN"
		file.titanAnims[ animType ][ "titan_stryder_sniper" ]				<- "titan_light_menu_loadout_idle_edit_NSTAR"
		file.titanAnims[ animType ][ "titan_stryder_northstar_prime" ]		<- "titan_light_menu_loadout_idle_edit_NSTAR"
		file.titanAnims[ animType ][ "titan_atlas_tracker" ]				<- "titan_medium_menu_loadout_idle_edit_TONE"
		file.titanAnims[ animType ][ "titan_atlas_vanguard" ]				<- "titan_medium_menu_loadout_idle_edit_TONE"
		file.titanAnims[ animType ][ "titan_atlas_stickybomb" ]				<- "titan_medium_menu_loadout_idle_edit_ION"
		file.titanAnims[ animType ][ "titan_atlas_ion_prime" ]				<- "titan_medium_menu_loadout_idle_edit_ION"
		file.titanAnims[ animType ][ "titan_ogre_meteor" ]					<- "titan_heavy_menu_loadout_idle_edit_SCORCH"
		file.titanAnims[ animType ][ "titan_ogre_scorch_prime" ]			<- "titan_heavy_menu_loadout_idle_edit_SCORCH"
		file.titanAnims[ animType ][ "titan_ogre_minigun" ]					<- "titan_heavy_menu_loadout_idle_edit_LEGION"
		file.titanAnims[ animType ][ "titan_ogre_legion_prime" ]			<- "titan_heavy_menu_loadout_idle_edit_LEGION"
		file.titanAnims[ animType ][ "titan_ogre_fighter" ]					<- "titan_heavy_menu_loadout_idle_edit_LEGION"

		animType = "nose_art_idle"
		file.titanAnims[ animType ] <- {}
		file.titanAnims[ animType ][ "titan_stryder_arc" ]					<- "titan_light_menu_noseart_idle"
		file.titanAnims[ animType ][ "titan_stryder_leadwall" ]				<- "titan_light_menu_noseart_idle"
		file.titanAnims[ animType ][ "titan_stryder_sniper" ]				<- "titan_light_menu_noseart_idle"
		file.titanAnims[ animType ][ "titan_stryder_northstar_prime" ]		<- "titan_light_menu_noseart_idle"
		file.titanAnims[ animType ][ "titan_atlas_tracker" ]				<- "titan_medium_menu_noseart_idle_TONE"
		file.titanAnims[ animType ][ "titan_atlas_vanguard" ]				<- "titan_medium_menu_noseart_idle_TONE"
		file.titanAnims[ animType ][ "titan_atlas_stickybomb" ]				<- "titan_medium_menu_noseart_idle"
		file.titanAnims[ animType ][ "titan_atlas_ion_prime" ]				<- "titan_medium_menu_noseart_idle"
		file.titanAnims[ animType ][ "titan_ogre_meteor" ]					<- "titan_heavy_menu_noseart_idle"
		file.titanAnims[ animType ][ "titan_ogre_scorch_prime" ]			<- "titan_heavy_menu_noseart_idle"
		file.titanAnims[ animType ][ "titan_ogre_minigun" ]					<- "titan_heavy_menu_noseart_idle_LEGION"
		file.titanAnims[ animType ][ "titan_ogre_legion_prime" ]			<- "titan_heavy_menu_noseart_idle_LEGION"
		file.titanAnims[ animType ][ "titan_ogre_fighter" ]					<- "titan_heavy_menu_noseart_idle"
	}

	string function GetPilotAnimType()
	{
		return file.presentationData[ file.presentationType ].pilotAnimType
	}

	string function GetTitanAnimType()
	{
		return file.presentationData[ file.presentationType ].titanAnimType
	}

	string function GetMenuPilotAnim( string animType, string bodyType, int menuAnimClass )
	{
		Assert( animType in file.pilotAnims )
		Assert( bodyType in file.pilotAnims[ animType ] )
		Assert( menuAnimClass in file.pilotAnims[ animType ][ bodyType ] )

		return file.pilotAnims[ animType ][ bodyType ][ menuAnimClass ]
	}

	string function GetMenuTitanAnim( string anim, string setFile )
	{
		Assert( anim in file.titanAnims )
		Assert( setFile in file.titanAnims[ anim ] )

		return file.titanAnims[ anim ][ setFile ]
	}

	void function InitMenuEntities( entity player )
	{
		file.sceneRef = GetEntByScriptName( "menu_scene_ref" )
		vector refOrigin = file.sceneRef.GetOrigin()
		vector refAngles = file.sceneRef.GetAngles()

		entity environmentModel = CreateClientSidePropDynamic( refOrigin, refAngles, DEFAULT_MENU_ENVIRONMENT_MODEL )
		environmentModel.kv.solid = 0
		environmentModel.kv.disableshadows = 1
		environmentModel.MakeSafeForUIScriptHack()

		#if DEV
			if ( BuildingCubeMaps() )
				return
		#endif

		file.cameraTarget = GetEntByScriptName( "menu_camera_target" )
		clGlobal.menuCamera = CreateClientSidePointCamera( <0, 0, 0>, <0, 0, 0>, DEFAULT_FOV )

		CreateMenuFX( environmentModel )


		// Create scene model
		clGlobal.menuSceneModel = CreateClientSidePropDynamic( refOrigin, refAngles, GetSetFileModel( DEFAULT_PILOT_SETTINGS ) )
		clGlobal.menuSceneModel.Hide()
		clGlobal.menuSceneModel.MakeSafeForUIScriptHack()
		file.cameraTarget.SetParent( clGlobal.menuSceneModel, "VDU", false, 0.0 )

		// Create movers
		CreateMover( file.menuPilot, "ORIGIN", PILOT_MAX_TURN_SPEED )
		CreateMover( file.menuTitan, "PROPGUN", TITAN_MAX_TURN_SPEED )
		CreateMover( file.menuFaction, "CHESTFOCUS" )
		CreateMover( file.menuBoost, "HEADFOCUS" )

		//thread DrawTag( clGlobal.menuSceneModel, "ORIGIN" )
		//thread DrawTag( clGlobal.menuSceneModel, "PROPGUN" )
		//thread DrawTag( clGlobal.menuSceneModel, "CHESTFOCUS" )
		//thread DrawTag( clGlobal.menuSceneModel, "HEADFOCUS" )

		//thread DrawOrg( file.menuPilot.mover )
		//thread DrawOrg( file.menuTitan.mover )
		//thread DrawOrg( file.menuFaction.mover )
		//thread DrawOrg( file.menuBoost.mover )

		WaitSignal( level, "CachedLoadoutsReady" )

		CreatePilotModel( player, file.menuPilot.mover )
		CreateTitanModel( player, file.menuTitan.mover )
		CreateFactionModel( player, file.menuFaction.mover )
		CreateBoostModel( player, file.menuBoost.mover )
		#if HAS_WORLD_CALLSIGN
			CreateCallsign( player, clGlobal.menuSceneModel )
		#endif
		CreateStoreBackground( player )

		clGlobal.initializedMenuModels = true
		UpdateCallsign( player )
	}

	void function CreateMover( CharacterData character, string attachName, float maxTurnSpeed = DEFAULT_MAX_TURN_SPEED )
	{
		character.mover = CreateClientsideScriptMover( $"models/dev/empty_model.mdl", <0, 0, 0>, <0, 0, 0> )
		character.mover.SetParent( clGlobal.menuSceneModel, attachName, false, 0.0 )
		character.attachName = attachName
		character.maxTurnSpeed = maxTurnSpeed
	}

	void function CreatePilotModel( entity player, entity mover )
	{
		int team = player.GetTeam()
		int loadoutIndex = GetPersistentSpawnLoadoutIndex( player, "pilot" )
		string suit = GetPilotLoadoutSuit( loadoutIndex )
		string genderRace = GetPilotLoadoutGenderRace( loadoutIndex )
		string setFile = GetSuitAndGenderBasedSetFile( suit, genderRace )
		asset bodyModel = GetSetFileModel( setFile )

		vector refOrigin = mover.GetOrigin()
		vector refAngles = mover.GetAngles()

		if ( DREW_MODE == 1 ) // TEMPHACK
		{
			refOrigin = refOrigin + <0, 0, -1000>
		}
		else if ( DREW_MODE == 2 )
		{
			entity greenScreenEnt = CreateClientSidePropDynamic( <0, 0, 0>, <0, 0, 0>, GREEN_SCREEN_MODEL )
			greenScreenEnt.MakeSafeForUIScriptHack()
			greenScreenEnt.kv.disableshadows = 1
		}

		entity bodyEnt = CreateClientSidePropDynamic( refOrigin, refAngles, bodyModel )
		bodyEnt.SetParent( mover )
		bodyEnt.SetAlive( true )
		bodyEnt.SetVisibleForLocalPlayer( 0 )
		bodyEnt.MakeSafeForUIScriptHack()
		SetTeam( bodyEnt, team )

		file.menuPilot.body = bodyEnt

		string attachName = "PROPGUN"
		int attachIndex = bodyEnt.LookupAttachment( attachName )
		vector origin = bodyEnt.GetAttachmentOrigin( attachIndex )
		vector angles = bodyEnt.GetAttachmentAngles( attachIndex )
		string weapon = GetPilotLoadoutWeapon( loadoutIndex, clGlobal.heldPilotWeaponType )
		entity weaponEnt = CreateWeaponModel( weapon, origin, angles )

		weaponEnt.SetParent( bodyEnt, attachName, false, 0.0 )

		bodyEnt.SetIKWeapon( weaponEnt )
		file.menuPilot.weapon = weaponEnt
	}

	var function CreateCallsignTopology( vector org, vector ang, float width, float height )
	{
		// adjust so the RUI is drawn with the org as its center point
		org += ( (AnglesToRight( ang )*-1) * (width*0.5) )
		org += ( AnglesToUp( ang ) * (height*0.5) )

		// right and down vectors that get added to base org to create the display size
		vector right = ( AnglesToRight( ang ) * width )
		vector down = ( (AnglesToUp( ang )*-1) * height )

		return RuiTopology_CreatePlane( org, right, down, true )
	}

	void function CreateCallsign( entity player, entity mover )
	{
		//var topo = CreateCallsignTopology( GetMenuPilotBody().GetOrigin() + <110, 32, 100>, < 0, 45, 6 >, 32 * 1.25, 17 * 1.25 )
		//var topo = CreateCallsignTopology( GetMenuPilotBody().GetOrigin() + <98, 16, 92>, < 0, 45, 6 >, 32 * 1.15, 17 * 1.15 )
		var topo = CreateCallsignTopology( < -32, 50, 70 >, <0, 165, 6>, 28, 15 )
		RuiTopology_SetParent( topo, mover, "ORIGIN" )
		var rui = RuiCreate( $"ui/callsign_basic.rpak", topo, RUI_DRAW_WORLD, 0 )
		file.menuCallsignRui = rui
		file.menuCallsignTopo = topo

		UpdateCallsign( player )
	}

	void function CreateStoreBackground( entity player )
	{
		file.menuStoreBackground = CreateClientSidePropDynamic( <68.1134, 377.554, -21.029>, <0.0, 225.0, 0.0>, $"models/test/brad/store_card.mdl" )
	}

	void function UpdateStoreBackground( entity player, int storeBgIndex )
	{
		switch ( storeBgIndex )
		{
			case STORE_BG_DEFAULT:
				file.menuStoreBackground.SetModel( $"models/test/brad/store_card.mdl" )
				break
			case STORE_BG_BUNDLE1:
				file.menuStoreBackground.SetModel( $"models/test/brad/store_card_angel_city.mdl" )
				break
			case STORE_BG_BUNDLE2:
				file.menuStoreBackground.SetModel( $"models/test/brad/store_card_colony.mdl" )
				break
		}
	}

	void function UpdateStorePrimeBg( entity player, int loadoutIndex )
	{
		switch ( loadoutIndex )
		{
			case 0:
				RuiSetImage( file.menuStorePrimeBgRui, "bgImage", $"rui/menu/store/prime_ion_bg" )
				break
			case 1:
				RuiSetImage( file.menuStorePrimeBgRui, "bgImage", $"rui/menu/store/prime_scorch_bg" )
				break
			case 2:
				RuiSetImage( file.menuStorePrimeBgRui, "bgImage", $"rui/menu/store/prime_northstar_bg" )
				break
			case 3:
				RuiSetImage( file.menuStorePrimeBgRui, "bgImage", $"rui/menu/store/prime_ronin_bg" )
				break
			case 4:
				RuiSetImage( file.menuStorePrimeBgRui, "bgImage", $"rui/menu/store/prime_tone_bg" )
				break
			case 5:
				RuiSetImage( file.menuStorePrimeBgRui, "bgImage", $"rui/menu/store/prime_legion_bg" )
				break
		}
	}

	void function UpdateCallsign( entity player )
	{
		if ( !clGlobal.initializedMenuModels ) // Handle early calls that UI script can trigger before client is ready
			return

		#if HAS_WORLD_CALLSIGN
			CallingCard callingCard = PlayerCallingCard_GetActive( player )
			CallsignIcon callsignIcon = PlayerCallsignIcon_GetActive( player )

			RuiSetImage( file.menuCallsignRui, "cardImage", callingCard.image )
			RuiSetInt( file.menuCallsignRui, "layoutType", callingCard.layoutType )
			RuiSetImage( file.menuCallsignRui, "iconImage", callsignIcon.image )
			RuiSetString( file.menuCallsignRui, "playerLevel", PlayerXPDisplayGenAndLevel( player.GetGen(), player.GetLevel() ) )
			RuiSetString( file.menuCallsignRui, "playerName", player.GetPlayerName() )
			RuiSetBool( file.menuCallsignRui, "isLobbyCard", true )

			thread KeepCallsignUpToDate( player )
		#endif
	}

	void function KeepCallsignUpToDate( entity player )
	{
		#if HAS_WORLD_CALLSIGN
			player.Signal( "UpdateCallsign" )
			player.EndSignal( "UpdateCallsign" )

			while ( IsValid( player ) )
			{
				CallingCard callingCard = PlayerCallingCard_GetActive( player )
				CallsignIcon callsignIcon = PlayerCallsignIcon_GetActive( player )
				RuiSetString( file.menuCallsignRui, "playerName", player.GetPlayerName() )
				RuiSetString( file.menuCallsignRui, "playerLevel", PlayerXPDisplayGenAndLevel( player.GetGen(), player.GetLevel() ) )
				RuiSetImage( file.menuCallsignRui, "cardImage", callingCard.image )
				RuiSetImage( file.menuCallsignRui, "iconImage", callsignIcon.image )
				RuiSetInt( file.menuCallsignRui, "layoutType", callingCard.layoutType )
				wait 0.5
			}
		#endif
	}

	entity function CreateWeaponModel( string weapon, vector origin, vector angles )
	{
		entity weaponEnt = CreateClientSidePropDynamic( origin, angles, GetWeaponModel( weapon ) )
		weaponEnt.MakeSafeForUIScriptHack()

		return weaponEnt
	}

	void function CreateTitanModel( entity player, entity mover )
	{
		int team = player.GetTeam()
		int loadoutIndex = GetPersistentSpawnLoadoutIndex( player, "titan" )
		string setFile = GetTitanLoadoutSetFile( loadoutIndex )
		asset chassisModel = GetSetFileModel( setFile )

		vector refOrigin = mover.GetOrigin()
		vector refAngles = mover.GetAngles()

		if ( DREW_MODE == 1 ) // TEMPHACK
			refOrigin = refOrigin + < 0, 0, -1000 >

		entity chassisEnt = CreateClientSidePropDynamic( refOrigin, refAngles, chassisModel )
		chassisEnt.SetParent( mover )
		chassisEnt.SetAlive( true )
		chassisEnt.SetVisibleForLocalPlayer( 0 )
		chassisEnt.MakeSafeForUIScriptHack()
		SetTeam( chassisEnt, team )

		file.menuTitan.body = chassisEnt

		int attachIndex = chassisEnt.LookupAttachment( "PROPGUN" )
		vector origin = chassisEnt.GetAttachmentOrigin( attachIndex )
		vector angles = chassisEnt.GetAttachmentAngles( attachIndex )

		string weapon = GetTitanLoadoutPrimary( loadoutIndex )
		asset weaponModel = GetWeaponModel( weapon )

		entity weaponEnt = CreateClientSidePropDynamic( origin, angles, weaponModel )
		weaponEnt.SetParent( chassisEnt, "PROPGUN", false, 0.0 )
		weaponEnt.MakeSafeForUIScriptHack()
		file.menuTitan.weapon = weaponEnt
	}

	void function CreateFactionModel( entity player, entity mover )
	{
		int team = player.GetTeam()
		string ref = GetFactionChoice( player )
		asset bodyModel = GetFactionModel( ref )

		vector refOrigin = mover.GetOrigin()
		vector refAngles = mover.GetAngles()

		entity bodyEnt = CreateClientSidePropDynamic( refOrigin, refAngles, bodyModel )
		bodyEnt.SetParent( mover )
		bodyEnt.SetAlive( true )
		bodyEnt.SetVisibleForLocalPlayer( 0 )
		bodyEnt.MakeSafeForUIScriptHack()
		SetTeam( bodyEnt, team )

		file.menuFaction.body = bodyEnt

		entity propEnt = CreateFactionPropModel( bodyEnt, ref )
		if ( IsValid( file.menuFaction.weapon ) )
			file.menuFaction.weapon.Destroy()

		file.menuFaction.weapon = propEnt
	}

	entity function CreateFactionPropModel( entity baseEnt, string ref )
	{
		string attachName = GetFactionPropAttachment( ref )
		if ( attachName == "" )
			return null

		int attachIndex = baseEnt.LookupAttachment( attachName )
		vector origin = baseEnt.GetAttachmentOrigin( attachIndex )
		vector angles = baseEnt.GetAttachmentAngles( attachIndex )
		asset propModel = GetFactionPropModel( ref )

		entity propEnt = CreateClientSidePropDynamic( origin, angles, propModel )
		propEnt.SetParent( baseEnt, attachName, false, 0.0 )
		propEnt.MakeSafeForUIScriptHack()

		return propEnt
	}

	void function CreateBoostModel( entity player, entity mover )
	{
		string ref = GetSelectedBurnCardRef( player )
		asset model = GetBoostModel( ref )

		vector refOrigin = mover.GetOrigin()
		vector refAngles = mover.GetAngles()

		entity modelEnt = CreateClientSidePropDynamic( refOrigin, refAngles, model )
		modelEnt.SetParent( mover )
		modelEnt.SetVisibleForLocalPlayer( 0 )
		modelEnt.MakeSafeForUIScriptHack()

		file.menuBoost.body = modelEnt
	}

	entity function CreateAttachedModel( entity baseEnt, asset model, string attachName )
	{
		int attachIndex = baseEnt.LookupAttachment( attachName )
		vector origin = baseEnt.GetAttachmentOrigin( attachIndex )
		vector angles = baseEnt.GetAttachmentAngles( attachIndex )

		entity propEnt = CreateClientSidePropDynamic( origin, angles, model )
		propEnt.SetParent( baseEnt, attachName, false, 0.0 )
		propEnt.MakeSafeForUIScriptHack()

		return propEnt
	}

	void function CreateMenuFX( entity model )
	{
		int index = GetParticleSystemIndex( MENU_TEST_EFFECT )
		int attachID = model.LookupAttachment( "ORIGIN" )

		printt( index )
		printt( model )
		printt( attachID )
		int fxID = StartParticleEffectOnEntity( model, index, FX_PATTACH_POINT_FOLLOW, attachID )
		EffectSetDontKillForReplay( fxID )
	}

	void function ServerCallback_UpdatePilotModel( int loadoutIndex )
	{
		if ( !clGlobal.mapSupportsMenuModels )
			return

		entity player = GetLocalClientPlayer()

		UpdatePilotModel( player, loadoutIndex )
	}

	void function UpdatePilotModel( entity player, int loadoutIndex )
	{
		if ( !clGlobal.initializedMenuModels ) // Handle early calls that UI script can trigger before client is ready
			return

		string genderRace = GetPilotLoadoutGenderRace( loadoutIndex )
		string suit = GetPilotLoadoutSuit( loadoutIndex )
		string setFile = GetSuitAndGenderBasedSetFile( suit, genderRace )
		string weapon = GetPilotLoadoutWeapon( loadoutIndex, clGlobal.heldPilotWeaponType )
		array<string> mods = GetPilotLoadoutWeaponMods( loadoutIndex, clGlobal.heldPilotWeaponType )
		mods.removebyvalue( "" )
		mods.removebyvalue( "none" )

		asset bodyModel = GetSetFileModel( setFile )
		asset weaponModel = GetWeaponModel( weapon )
		string idleAnim = GetMenuPilotAnim( GetPilotAnimType(), suit, GetItemMenuAnimClass( weapon ) )
		int camoIndex = GetPilotCamoIndex( loadoutIndex )
		int weaponCamoIndex = GetPilotLoadoutWeaponCamoIndex( loadoutIndex, clGlobal.heldPilotWeaponType )

		clGlobal.currentMenuPilotModels.bodyModel = bodyModel
		clGlobal.currentMenuPilotModels.camoIndex = camoIndex
		clGlobal.currentMenuPilotModels.idleAnim = idleAnim

		clGlobal.currentMenuPilotModels.weapon = weapon
		clGlobal.currentMenuPilotModels.weaponModel = weaponModel
		clGlobal.currentMenuPilotModels.weaponCamoIndex = weaponCamoIndex
		clGlobal.currentMenuPilotModels.mods = mods

		UpdatePilotModelDisplay( player )
	}

	void function ServerCallback_UpdateTitanModel( int loadoutIndex, int flags = 0 )
	{
		if ( !clGlobal.mapSupportsMenuModels )
			return

		entity player = GetLocalClientPlayer()

		UpdateTitanModel( player, loadoutIndex, flags )
	}

	void function UpdateTitanModel( entity player, int loadoutIndex, int flags = 0 )
	{
		if ( !clGlobal.initializedMenuModels ) // Handle early calls that UI script can trigger before client is ready
			return

		if ( loadoutIndex == -1 )
		{
			file.menuTitan.body.Hide()
			file.menuTitan.weapon.Hide()

			return
		}

		file.menuTitan.body.Show()
		file.menuTitan.weapon.Show()

		TitanLoadoutDef cachedLoadout = GetCachedTitanLoadout( loadoutIndex )
		string setFile
		if ( flags & TITANMENU_FORCE_NON_PRIME )
			setFile = GetSetFileForTitanClassAndPrimeStatus( cachedLoadout.titanClass, false )
		else if ( flags & TITANMENU_FORCE_PRIME )
			setFile = GetSetFileForTitanClassAndPrimeStatus( cachedLoadout.titanClass, true )
		else
			setFile = GetTitanLoadoutSetFile( loadoutIndex )

		string weapon = GetTitanLoadoutPrimary( loadoutIndex )
		asset chassisModel = GetSetFileModel( setFile )
		asset weaponModel = GetWeaponModel( weapon )
		string idleAnim = GetMenuTitanAnim( GetTitanAnimType(), setFile )
		int camoIndex
		int skinIndex
		int decalIndex
		int weaponCamoIndex

		if ( !( flags & TITANMENU_NO_CUSTOMIZATION ) )
		{
			camoIndex = GetTitanCamoIndex( loadoutIndex )
			skinIndex = GetTitanSkinIndex( loadoutIndex )
			decalIndex = GetTitanDecalIndex( loadoutIndex )
			weaponCamoIndex = cachedLoadout.primaryCamoIndex
		}

		clGlobal.currentMenuTitanModels.bodyModel = chassisModel
		clGlobal.currentMenuTitanModels.camoIndex = camoIndex
		clGlobal.currentMenuTitanModels.skinIndex = skinIndex
		clGlobal.currentMenuTitanModels.decalIndex = decalIndex
		clGlobal.currentMenuTitanModels.idleAnim = idleAnim

		clGlobal.currentMenuTitanModels.weaponModel = weaponModel
		clGlobal.currentMenuTitanModels.weaponCamoIndex = weaponCamoIndex

		UpdateTitanModelDisplay( player )
	}

	void function UpdatePilotModelDisplay( entity player )
	{
		if ( !clGlobal.initializedMenuModels ) // Handle early calls that UI script can trigger before client is ready
			return

		asset bodyModel = clGlobal.previewMenuPilotModels.bodyModel
		if ( bodyModel == $"" )
			bodyModel = clGlobal.currentMenuPilotModels.bodyModel

		string idleAnim = clGlobal.previewMenuPilotModels.idleAnim
		if ( idleAnim == "" )
			idleAnim = clGlobal.currentMenuPilotModels.idleAnim

		bool playIdle = false
		if ( file.menuPilot.body.GetModelName() != bodyModel || idleAnim != file.menuPilot.bodyAnim ) // Model has changed or anim has changed
			playIdle = true

		file.menuPilot.body.SetModel( bodyModel )

		int camoIndex = clGlobal.previewMenuPilotModels.camoIndex
		if ( camoIndex == -1 )
			camoIndex = clGlobal.currentMenuPilotModels.camoIndex

		if ( camoIndex > 0 )
		{
			file.menuPilot.body.SetSkin( PILOT_SKIN_INDEX_CAMO )
			file.menuPilot.body.SetCamo( camoIndex )
		}
		else
		{
			file.menuPilot.body.SetSkin( 0 )
			file.menuPilot.body.SetCamo( -1 )
		}

		if ( playIdle )
		{
			PlayMenuAnim( file.menuPilot.body, idleAnim )
			file.menuPilot.bodyAnim = idleAnim
		}

		string weapon = clGlobal.previewMenuPilotModels.weapon
		if ( weapon == "" )
			weapon = clGlobal.currentMenuPilotModels.weapon

		asset weaponModel = clGlobal.previewMenuPilotModels.weaponModel
		if ( weaponModel == $"" )
			weaponModel = clGlobal.currentMenuPilotModels.weaponModel

		file.menuPilot.weapon.SetModel( weaponModel )

		bool isPreviewingWeaponNotMatchingCurrent = clGlobal.previewMenuPilotModels.weaponModel != $"" && clGlobal.previewMenuPilotModels.weaponModel != clGlobal.currentMenuPilotModels.weaponModel

		array<string> mods = clGlobal.previewMenuPilotModels.mods
		if ( mods.len() == 0 )
		{
			// Don't show mods if previewing a weapon that isn't already equipped
			if ( isPreviewingWeaponNotMatchingCurrent )
				mods = []
			else
				mods = clGlobal.currentMenuPilotModels.mods
		}
		SetBodyGroupsForWeaponConfig( file.menuPilot.weapon, weapon, mods )

		int weaponCamoIndex
		if ( isPreviewingWeaponNotMatchingCurrent )
		{
			weaponCamoIndex = 0
		}
		else
		{
			weaponCamoIndex = clGlobal.previewMenuPilotModels.weaponCamoIndex
			if ( weaponCamoIndex == -1 )
				weaponCamoIndex = clGlobal.currentMenuPilotModels.weaponCamoIndex
		}

		//printt( "clGlobal.previewMenuPilotModels.weaponCamoIndex:", clGlobal.previewMenuPilotModels.weaponCamoIndex )
		//printt( "clGlobal.currentMenuPilotModels.weaponCamoIndex:", clGlobal.currentMenuPilotModels.weaponCamoIndex )
		//printt( "weaponCamoIndex:", weaponCamoIndex )
		if ( weaponCamoIndex > 0 )
		{
			file.menuPilot.weapon.SetSkin( WEAPON_SKIN_INDEX_CAMO )
			//printt( "Set pilot weapon skin to:", WEAPON_SKIN_INDEX_CAMO )
			file.menuPilot.weapon.SetCamo( weaponCamoIndex )
			//printt( "Set pilot weapon camo to:", weaponCamoIndex )
		}
		else
		{
			file.menuPilot.weapon.SetSkin( 0 )
			//printt( "Set pilot weapon skin to:", 0 )
			file.menuPilot.weapon.SetCamo( -1 )
			//printt( "Set pilot weapon camo to:", -1 )
		}
	}

	void function UpdateTitanModelDisplay( entity player )
	{
		if ( !clGlobal.initializedMenuModels ) // Handle early calls that UI script can trigger before client is ready
			return

		asset bodyModel = clGlobal.previewMenuTitanModels.bodyModel
		if ( bodyModel == $"" )
			bodyModel = clGlobal.currentMenuTitanModels.bodyModel

		string idleAnim = clGlobal.previewMenuTitanModels.idleAnim
		if ( idleAnim == "" )
			idleAnim = clGlobal.currentMenuTitanModels.idleAnim

		bool playIdle = false
		if ( file.menuTitan.body.GetModelName() != bodyModel || idleAnim != file.menuTitan.bodyAnim ) // Model has changed or anim has changed
			playIdle = true

		if ( file.menuTitan.body.GetModelName() != bodyModel  )
		{
			file.menuTitan.body.SetSkin( 0 ) //First reset skin and decal to default to avoid code error message when changing models, if the new models don't have the same skins supported
			file.menuTitan.body.SetCamo( -1 )
			file.menuTitan.body.SetModel( bodyModel )
		}

		int camoIndex = clGlobal.previewMenuTitanModels.camoIndex
		int skinIndex = clGlobal.previewMenuTitanModels.skinIndex

		if ( camoIndex == -1 && skinIndex == 0 )
		{
			camoIndex = clGlobal.currentMenuTitanModels.camoIndex
			skinIndex = clGlobal.currentMenuTitanModels.skinIndex
		}
		else
		{
			camoIndex = clGlobal.previewMenuTitanModels.camoIndex
			skinIndex = clGlobal.previewMenuTitanModels.skinIndex
		}

		if ( camoIndex > 0 )
		{
			file.menuTitan.body.SetSkin( TITAN_SKIN_INDEX_CAMO )
			file.menuTitan.body.SetCamo( camoIndex )
		}
		else
		{
			file.menuTitan.body.SetSkin( skinIndex )
			file.menuTitan.body.SetCamo( -1 )
		}

		int decalIndex = clGlobal.previewMenuTitanModels.decalIndex
		if ( decalIndex == -1 )
			decalIndex = clGlobal.currentMenuTitanModels.decalIndex

		file.menuTitan.body.SetDecal( decalIndex )
		//printt( "Set titan decal to:", decalIndex )

		if ( playIdle )
		{
			PlayMenuAnim( file.menuTitan.body, idleAnim )
			file.menuTitan.bodyAnim = idleAnim
		}

		asset weaponModel = clGlobal.previewMenuTitanModels.weaponModel
		if ( weaponModel == $"" )
			weaponModel = clGlobal.currentMenuTitanModels.weaponModel

		file.menuTitan.weapon.SetModel( weaponModel )

		int weaponCamoIndex = clGlobal.previewMenuTitanModels.weaponCamoIndex
		if ( weaponCamoIndex == -1 )
			weaponCamoIndex = clGlobal.currentMenuTitanModels.weaponCamoIndex

		//printt( "clGlobal.previewMenuTitanModels.weaponCamoIndex:", clGlobal.previewMenuTitanModels.weaponCamoIndex )
		//printt( "clGlobal.currentMenuTitanModels.weaponCamoIndex:", clGlobal.currentMenuTitanModels.weaponCamoIndex )
		//printt( "weaponCamoIndex:", weaponCamoIndex )
		if ( weaponCamoIndex > 0 )
		{
			file.menuTitan.weapon.SetSkin( WEAPON_SKIN_INDEX_CAMO )
			//printt( "Set titan weapon skin to:", WEAPON_SKIN_INDEX_CAMO )
			file.menuTitan.weapon.SetCamo( weaponCamoIndex )
			//printt( "Set titan weapon camo to:", weaponCamoIndex )
		}
		else
		{
			file.menuTitan.weapon.SetSkin( 0 )
			//printt( "Set titan weapon skin to:", 0 )
			file.menuTitan.weapon.SetCamo( -1 )
			//printt( "Set titan weapon camo to:", -1 )
		}

		if ( IsValid( file.menuTitan.prop ) )
			file.menuTitan.prop.Destroy()

		if ( bodyModel == $"models/titans/light/titan_light_locust.mdl" || bodyModel == $"models/titans/light/titan_light_ronin_prime.mdl" )
			file.menuTitan.prop = CreateAttachedModel( file.menuTitan.body, $"models/weapons/titan_sword/w_titan_sword.mdl", "SIDEARM_HOLSTER" )
	}

	void function SetEditingPilotLoadoutIndex( entity player, int loadoutIndex )
	{
		clGlobal.editingPilotLoadoutIndex = loadoutIndex
	}

	void function ClearEditingPilotLoadoutIndex( entity player )
	{
		clGlobal.editingPilotLoadoutIndex = -1
	}

	void function SetHeldPilotWeaponType( entity player, int itemType )
	{
		clGlobal.heldPilotWeaponType = itemType
	}

	void function SetEditingTitanLoadoutIndex( entity player, int loadoutIndex )
	{
		clGlobal.editingTitanLoadoutIndex = loadoutIndex
	}

	void function ClearEditingTitanLoadoutIndex( entity player )
	{
		clGlobal.editingTitanLoadoutIndex = -1
	}


	void function PreviewPilotCharacter( entity player, int itemIndex )
	{
		Assert( clGlobal.editingPilotLoadoutIndex != -1 )

		array<ItemDisplayData> items = GetVisibleItemsOfType( eItemTypes.PILOT_SUIT )
		string animType = "focused_idle"
		string suit = items[ itemIndex ].ref
		string weapon = GetPilotLoadoutWeapon( clGlobal.editingPilotLoadoutIndex, clGlobal.heldPilotWeaponType )
		string idleAnim = GetMenuPilotAnim( animType, suit, GetItemMenuAnimClass( weapon ) )
		string genderRace = GetPilotLoadoutGenderRace( clGlobal.editingPilotLoadoutIndex )
		string setFile = GetSuitAndGenderBasedSetFile( suit, genderRace )
		asset bodyModel = GetSetFileModel( setFile )

		clGlobal.previewMenuPilotModels.bodyModel = bodyModel
		clGlobal.previewMenuPilotModels.idleAnim = idleAnim

		UpdatePilotModelDisplay( player )
	}

	void function PreviewPilotWeapon( entity player, int itemType, int itemIndex, int weaponCategory )
	{
		Assert( itemType == eItemTypes.PILOT_PRIMARY || itemType == eItemTypes.PILOT_SECONDARY )
		Assert( clGlobal.editingPilotLoadoutIndex != -1 )

		array<ItemDisplayData> items
		if ( weaponCategory != -1 )
			items = GetVisibleItemsOfTypeForCategory( itemType, weaponCategory )
		else
			items = GetVisibleItemsOfType( itemType )

		string weapon = items[ itemIndex ].ref
		asset weaponModel = GetWeaponModel( weapon )
		string animType = "weapon_inspect_idle"
		string suit = GetPilotLoadoutSuit( clGlobal.editingPilotLoadoutIndex )
		string idleAnim = GetMenuPilotAnim( animType, suit, GetItemMenuAnimClass( weapon ) )
		int camoIndex = GetPilotLoadoutWeaponCamoIndex( clGlobal.editingPilotLoadoutIndex, itemType )

		clGlobal.previewMenuPilotModels.idleAnim = idleAnim
		clGlobal.previewMenuPilotModels.weapon = weapon
		clGlobal.previewMenuPilotModels.weaponModel = weaponModel
		clGlobal.previewMenuPilotModels.weaponCamoIndex = camoIndex
		clGlobal.previewMenuPilotModels.mods = []

		UpdatePilotModelDisplay( player )
	}

	void function PreviewPilotWeaponMod( entity player, int modIndex, string modRef )
	{
		Assert( clGlobal.editingPilotLoadoutIndex != -1 )

		array<string> mods = GetPilotLoadoutWeaponMods( clGlobal.editingPilotLoadoutIndex, clGlobal.heldPilotWeaponType )
		mods[ modIndex ] = modRef
		mods.removebyvalue( "" )
		mods.removebyvalue( "none" )

		clGlobal.previewMenuPilotModels.mods = mods

		UpdatePilotModelDisplay( player )
	}

	void function PreviewPilotCamoChange( entity player, int camoIndex )
	{
		clGlobal.previewMenuPilotModels.camoIndex = camoIndex
		UpdatePilotModelDisplay( player )
	}

	void function PreviewPilotWeaponCamoChange( entity player, int itemType, int camoIndex )
	{
		clGlobal.previewMenuPilotModels.weaponCamoIndex = camoIndex
		UpdatePilotModelDisplay( player )
	}

	void function PreviewTitanDecalChange( entity player, int decalIndex )
	{
		clGlobal.previewMenuTitanModels.decalIndex = decalIndex
		UpdateTitanModelDisplay( player )
	}

	void function PreviewTitanCamoChange( entity player, int camoIndex )
	{
		clGlobal.previewMenuTitanModels.camoIndex = camoIndex
		clGlobal.previewMenuTitanModels.skinIndex = camoIndex > 0 ? TITAN_SKIN_INDEX_CAMO : 0
		printt( "PreviewTitanCamoChange", clGlobal.previewMenuTitanModels.skinIndex, clGlobal.previewMenuTitanModels.camoIndex )
		UpdateTitanModelDisplay( player )
	}

	void function PreviewTitanSkinChange( entity player, int skinIndex )
	{
		clGlobal.previewMenuTitanModels.camoIndex = -1
		clGlobal.previewMenuTitanModels.skinIndex = skinIndex
		printt( "PreviewTitanSkinChange", clGlobal.previewMenuTitanModels.skinIndex, clGlobal.previewMenuTitanModels.camoIndex )
		UpdateTitanModelDisplay( player )
	}

	void function PreviewTitanWeaponCamoChange( entity player, int itemType, int camoIndex )
	{
		clGlobal.previewMenuTitanModels.weaponCamoIndex = camoIndex
		UpdateTitanModelDisplay( player )
	}

	void function UpdateFactionModel( entity player, int itemIndex )
	{
		if ( !clGlobal.initializedMenuModels ) // Handle early calls that UI script can trigger before client is ready
			return

		array<ItemDisplayData> items = GetVisibleItemsOfType( eItemTypes.FACTION )
		string ref = items[ itemIndex ].ref
		asset model = GetFactionModel( ref )
		asset propModel = GetFactionPropModel( ref )
		string idleAnim = GetFactionIdleAnim( ref )

		//bool playIdle = false
		//if ( file.menuFaction.body.GetModelName() != model || idleAnim != file.menuFaction.bodyAnim ) // Model has changed or anim has changed
		//	playIdle = true

		file.menuFaction.body.SetModel( model )

		entity propEnt = CreateFactionPropModel( file.menuFaction.body, ref )
		if ( IsValid( file.menuFaction.weapon ) )
			file.menuFaction.weapon.Destroy()

		file.menuFaction.weapon = propEnt

		//if ( playIdle )
		//{
			PlayMenuAnim( file.menuFaction.body, idleAnim )
			file.menuFaction.bodyAnim = idleAnim
		//}
	}

	void function UpdateBoostModel( entity player, int itemIndex )
	{
		if ( !clGlobal.initializedMenuModels ) // Handle early calls that UI script can trigger before client is ready
			return

		array<ItemDisplayData> items = GetVisibleItemsOfType( eItemTypes.BURN_METER_REWARD )
		string ref = items[ itemIndex ].ref
		asset model = GetBoostModel( ref )
		//string idleAnim = "pt_menu_faction_idle_01"
		//if ( itemIndex == 0 )
		//	idleAnim = "dp_idle_C"

		//bool playIdle = false
		//if ( file.menuBoost.body.GetModelName() != model || idleAnim != file.menuBoost.bodyAnim ) // Model has changed or anim has changed
		//	playIdle = true

		//file.menuBoost.body.SetModel( model )
		int skinIndex = GetBoostSkin( ref )
		file.menuBoost.body.SetSkin( skinIndex )

		//if ( playIdle )
		//{
			//PlayMenuAnim( file.menuBoost.body, idleAnim )
			//file.menuBoost.bodyAnim = idleAnim
		//}
	}

	void function UpdateCallsignCard( entity player, int itemIndex )
	{
		if ( !clGlobal.initializedMenuModels ) // Handle early calls that UI script can trigger before client is ready
			return

		#if HAS_WORLD_CALLSIGN
			CallingCard callsignCard = CallingCard_GetByIndex( itemIndex )
			RuiSetImage( file.menuCallsignRui, "cardImage", callsignCard.image )
			RuiSetInt( file.menuCallsignRui, "layoutType", callsignCard.layoutType )
		#endif
	}

	void function UpdateCallsignIcon( entity player, int itemIndex )
	{
		if ( !clGlobal.initializedMenuModels ) // Handle early calls that UI script can trigger before client is ready
			return

		#if HAS_WORLD_CALLSIGN
			CallsignIcon callsignIcon = CallsignIcon_GetByIndex( itemIndex )
			RuiSetImage( file.menuCallsignRui, "iconImage", callsignIcon.image )
		#endif
	}

	// TODO: Do we need to account for model strings sometimes having a skin specified by appending ":0", ":1", etc?
	asset function GetSetFileModel( string setFile )
	{
		return GetPlayerSettingsAssetForClassName( setFile, "bodymodel" )
	}

	string function GetPilotLoadoutGenderRace( int loadoutIndex )
	{
		return GetCachedPilotLoadout( loadoutIndex ).race
	}

	string function GetPilotLoadoutSuit( int loadoutIndex )
	{
		return GetCachedPilotLoadout( loadoutIndex ).suit
	}

	int function GetPilotCamoIndex( int loadoutIndex )
	{
		return GetCachedPilotLoadout( loadoutIndex ).camoIndex
	}

	string function GetPilotLoadoutWeapon( int loadoutIndex, int weaponItemType )
	{
		string ref

		if ( weaponItemType == eItemTypes.PILOT_PRIMARY )
			ref = GetCachedPilotLoadout( loadoutIndex ).primary
		else if ( weaponItemType == eItemTypes.PILOT_SECONDARY )
			ref = GetCachedPilotLoadout( loadoutIndex ).secondary
		else
			Assert( false )

		return ref
	}

	array<string> function GetPilotLoadoutWeaponMods( int loadoutIndex, int weaponItemType )
	{
		array<string> mods

		if ( weaponItemType == eItemTypes.PILOT_PRIMARY )
		{
			mods.append( GetCachedPilotLoadout( loadoutIndex ).primaryMod1 )
			mods.append( GetCachedPilotLoadout( loadoutIndex ).primaryMod2 )
			mods.append( GetCachedPilotLoadout( loadoutIndex ).primaryMod3 )
			mods.append( GetCachedPilotLoadout( loadoutIndex ).primaryAttachment )
		}
		else if ( weaponItemType == eItemTypes.PILOT_SECONDARY )
		{
			mods.append( GetCachedPilotLoadout( loadoutIndex ).secondaryMod1 )
			mods.append( GetCachedPilotLoadout( loadoutIndex ).secondaryMod2 )
			mods.append( GetCachedPilotLoadout( loadoutIndex ).secondaryMod3 )
		}
		else
		{
			Assert( false )
		}

		return mods
	}

	int function GetPilotLoadoutWeaponCamoIndex( int loadoutIndex, int weaponItemType )
	{
		int camoIndex = -1

		if ( weaponItemType == eItemTypes.PILOT_PRIMARY )
			camoIndex = GetCachedPilotLoadout( loadoutIndex ).primaryCamoIndex
		else if ( weaponItemType == eItemTypes.PILOT_SECONDARY )
			camoIndex = GetCachedPilotLoadout( loadoutIndex ).secondaryCamoIndex
		else
			Assert( false )

		return camoIndex
	}

	string function GetTitanLoadoutSetFile( int loadoutIndex )
	{
		return GetCachedTitanLoadout( loadoutIndex ).setFile
	}

	string function GetTitanLoadoutPrimary( int loadoutIndex )
	{
		return GetCachedTitanLoadout( loadoutIndex ).primary
	}

	int function GetTitanCamoIndex( int loadoutIndex )
	{
		return GetCachedTitanLoadoutCamoIndex( loadoutIndex )
	}

	int function GetTitanSkinIndex( int loadoutIndex )
	{
		return GetCachedTitanLoadoutSkinIndex( loadoutIndex )
	}

	int function GetTitanDecalIndex( int loadoutIndex )
	{
		return GetCachedTitanLoadoutDecalIndex( loadoutIndex )
	}

	asset function GetFactionModel( string ref )
	{
		var dataTable = GetDataTable( $"datatable/faction_leaders.rpak" )
		int row = GetDataTableRowMatchingStringValue( dataTable, GetDataTableColumnByName( dataTable, "persistenceRef" ), ref )
		asset model = GetDataTableAsset( dataTable, row, GetDataTableColumnByName( dataTable, "modelName" ) )

		return model
	}

	string function GetFactionPropAttachment( string ref )
	{
		var dataTable = GetDataTable( $"datatable/faction_leaders.rpak" )
		int row = GetDataTableRowMatchingStringValue( dataTable, GetDataTableColumnByName( dataTable, "persistenceRef" ), ref )
		string attachment = GetDataTableString( dataTable, row, GetDataTableColumnByName( dataTable, "propAttachment" ) )

		return attachment
	}

	asset function GetFactionPropModel( string ref )
	{
		var dataTable = GetDataTable( $"datatable/faction_leaders.rpak" )
		int row = GetDataTableRowMatchingStringValue( dataTable, GetDataTableColumnByName( dataTable, "persistenceRef" ), ref )
		asset model = GetDataTableAsset( dataTable, row, GetDataTableColumnByName( dataTable, "propModelName" ) )

		return model
	}

	string function GetFactionIdleAnim( string ref )
	{
		var dataTable = GetDataTable( $"datatable/faction_leaders.rpak" )
		int row = GetDataTableRowMatchingStringValue( dataTable, GetDataTableColumnByName( dataTable, "persistenceRef" ), ref )
		string anim = GetDataTableString( dataTable, row, GetDataTableColumnByName( dataTable, "menuIdleAnim" ) )

		return anim
	}

	asset function GetBoostModel( string ref )
	{
		var dataTable = GetDataTable( $"datatable/burn_meter_rewards.rpak" )
		int row = GetDataTableRowMatchingStringValue( dataTable, GetDataTableColumnByName( dataTable, "itemRef" ), ref )
		asset model = GetDataTableAsset( dataTable, row, GetDataTableColumnByName( dataTable, "model" ) )

		return model
	}

	void function SavePilotCharacterPreview( entity player )
	{
		clGlobal.currentMenuPilotModels.bodyModel = clGlobal.previewMenuPilotModels.bodyModel
		clGlobal.previewMenuPilotModels.bodyModel = $""

		clGlobal.previewMenuPilotModels.idleAnim = ""

		UpdatePilotModelDisplay( player )
	}

	void function SavePilotWeaponPreview( entity player )
	{
		clGlobal.currentMenuPilotModels.idleAnim = clGlobal.previewMenuPilotModels.idleAnim
		clGlobal.previewMenuPilotModels.idleAnim = ""

		clGlobal.currentMenuPilotModels.weapon = clGlobal.previewMenuPilotModels.weapon
		clGlobal.previewMenuPilotModels.weapon = ""

		clGlobal.currentMenuPilotModels.weaponModel = clGlobal.previewMenuPilotModels.weaponModel
		clGlobal.previewMenuPilotModels.weaponModel = $""

		clGlobal.previewMenuPilotModels.weaponCamoIndex = -1

		clGlobal.currentMenuPilotModels.mods = []

		UpdatePilotModelDisplay( player )
	}

	void function SavePilotWeaponModPreview( entity player )
	{
		clGlobal.currentMenuPilotModels.mods = clGlobal.previewMenuPilotModels.mods
		clGlobal.previewMenuPilotModels.mods = []
		UpdatePilotModelDisplay( player )
	}

	void function SavePilotCamoPreview( entity player )
	{
		clGlobal.currentMenuPilotModels.camoIndex = clGlobal.previewMenuPilotModels.camoIndex
		clGlobal.previewMenuPilotModels.camoIndex = -1
		UpdatePilotModelDisplay( player )
	}

	void function ClearAllPilotPreview( entity player )
	{
		clGlobal.previewMenuPilotModels.bodyModel = $""
		clGlobal.previewMenuPilotModels.camoIndex = -1
		clGlobal.previewMenuPilotModels.weapon = ""
		clGlobal.previewMenuPilotModels.weaponModel = $""
		clGlobal.previewMenuPilotModels.weaponCamoIndex = -1
		clGlobal.previewMenuPilotModels.mods = []
		clGlobal.previewMenuPilotModels.idleAnim = ""
		UpdatePilotModelDisplay( player )
	}

	void function SaveTitanDecalPreview( entity player )
	{
		clGlobal.currentMenuTitanModels.decalIndex = clGlobal.previewMenuTitanModels.decalIndex
		clGlobal.previewMenuTitanModels.decalIndex = -1
		UpdateTitanModelDisplay( player )
	}

	void function ClearTitanDecalPreview( entity player )
	{
		clGlobal.previewMenuTitanModels.decalIndex = -1
		UpdateTitanModelDisplay( player )
	}

	void function SaveTitanCamoPreview( entity player )
	{
		clGlobal.currentMenuTitanModels.camoIndex = clGlobal.previewMenuTitanModels.camoIndex
		clGlobal.previewMenuTitanModels.camoIndex = -1
		clGlobal.currentMenuTitanModels.skinIndex = clGlobal.previewMenuTitanModels.skinIndex
		clGlobal.previewMenuTitanModels.skinIndex = 0
		UpdateTitanModelDisplay( player )
	}

	void function ClearTitanCamoPreview( entity player )
	{
		clGlobal.previewMenuTitanModels.camoIndex = -1
		clGlobal.previewMenuTitanModels.skinIndex = 0
		UpdateTitanModelDisplay( player )
	}

	void function SaveTitanSkinPreview( entity player )
	{
		clGlobal.currentMenuTitanModels.skinIndex = clGlobal.previewMenuTitanModels.skinIndex
		clGlobal.previewMenuTitanModels.skinIndex = 0
		clGlobal.currentMenuTitanModels.camoIndex = clGlobal.previewMenuTitanModels.camoIndex
		clGlobal.previewMenuTitanModels.camoIndex = -1
		UpdateTitanModelDisplay( player )
	}

	void function ClearTitanSkinPreview( entity player )
	{
		clGlobal.previewMenuTitanModels.camoIndex = -1
		clGlobal.previewMenuTitanModels.skinIndex = 0
		UpdateTitanModelDisplay( player )
	}

	void function ClearAllTitanPreview( entity player )
	{
		clGlobal.previewMenuTitanModels.bodyModel = $""
		clGlobal.previewMenuTitanModels.camoIndex = -1
		clGlobal.previewMenuTitanModels.skinIndex = 0
		clGlobal.previewMenuTitanModels.weaponModel = $""
		clGlobal.previewMenuTitanModels.weaponCamoIndex = -1
		clGlobal.previewMenuTitanModels.idleAnim = ""
		UpdateTitanModelDisplay( player )
	}

	void function PlayMenuAnim( entity model, string anim )
	{
		float animCycle = model.GetCycle()

		//printt( "PlayMenuAnim(", model, ",",  anim, ")" )

		model.Anim_NonScriptedPlay( anim )
		model.SetCycle( animCycle )
	}

	void function SetPresentationType( entity player, int presentationType, bool interpolate )
	{
		thread SetPresentationTypeThread( player, presentationType, interpolate )
	}

	void function SetPresentationTypeThread( entity player, int presentationType, bool interpolate )
	{
		Signal( level, "EndSetPresentationType" )
		EndSignal( level, "EndSetPresentationType" )

		while ( !clGlobal.initializedMenuModels )
			WaitFrame()

		if ( file.presentationTypeInitialized && presentationType == file.presentationType )
			return

		file.presentationType = presentationType

		if ( !file.presentationTypeInitialized )
			file.presentationTypeInitialized = true

		if ( file.presentationData[ presentationType ].activateFunc != null )
			file.presentationData[ presentationType ].activateFunc()

		if ( IsValid( player ) )
			SetMenuCamera( player, presentationType, interpolate )

		CharacterData ornull lastActiveCharacter = file.activeCharacter
		file.activeCharacter = file.presentationData[ presentationType ].characterData

		#if HAS_WORLD_CALLSIGN
		if ( !file.presentationData[ presentationType ].showCallsign )
		{
			RuiSetFloat( file.menuCallsignRui, "cardAlpha", 0.0 )
		}
		else
		{
			RuiSetFloat( file.menuCallsignRui, "cardAlpha", 1.0 )
		}
		#endif

		if ( !file.presentationData[ presentationType ].showStoreBackground )
			file.menuStoreBackground.Hide()
		else
			file.menuStoreBackground.Show()

		if ( !file.presentationData[ presentationType ].showStorePrimeBg )
		{
			if ( file.menuStorePrimeBgCreated )
			{
				file.menuStorePrimeBgCreated = false
				RuiTopology_Destroy( file.menuStorePrimeBg )
				RuiDestroy( file.menuStorePrimeBgRui )
			}
		}
		else
		{
			file.menuStorePrimeBgCreated = true
			file.menuStorePrimeBg = RuiTopology_CreatePlane( < -91.6658, 453.079, 463.765>, <399.802, -12.5803, 0.000155184>, <3.28334, 104.34, -386.138>, false )
			file.menuStorePrimeBgRui = RuiCreate( $"ui/prime_titan_bg.rpak", file.menuStorePrimeBg, RUI_DRAW_WORLD, 0 )
		}

		if ( lastActiveCharacter != null )
			ResetCharacterRotation( expect CharacterData( lastActiveCharacter ) )
	}

	void function SetMenuCamera( entity player, int presentationType, bool interpolate )
	{
		string sceneAnim = file.presentationData[ presentationType ].sceneAnim
		clGlobal.menuSceneModel.Anim_PlayWithRefPoint( sceneAnim, file.sceneRef.GetOrigin(), file.sceneRef.GetAngles() + <0, -90, 0>, 0 )

		if ( presentationType == ePresentationType.INACTIVE )
		{
			SetMapSetting_CsmTexelScale( 1.0, 1.0 )
			SetMapSetting_CsmStartDistance( 0.0 )

			player.ClearMenuCameraEntity()
			printt( "Clearing menu camera" )
			player.SetScriptMenuOff()
			return
		}

		player.SetScriptMenuOn()

		float fov = file.presentationData[ presentationType ].fov
		player.SetMenuCameraEntity( clGlobal.menuCamera )
		clGlobal.menuCamera.SetTarget( file.cameraTarget, fov, interpolate, EASING_CUBIC_INOUT, TRANSITION_DURATION )

		//EASING_LINEAR
		//EASING_SINE_IN
		//EASING_SINE_OUT
		//EASING_SINE_INOUT
		//EASING_CIRC_IN
		//EASING_CIRC_OUT
		//EASING_CIRC_INOUT
		//EASING_CUBIC_IN
		//EASING_CUBIC_OUT
		//EASING_CUBIC_INOUT
		//EASING_BACK_IN
		//EASING_BACK_OUT
		//EASING_BACK_INOUT

		float dofNearStart 	= file.presentationData[ presentationType ].dofNearStart
		float dofNearEnd 	= file.presentationData[ presentationType ].dofNearEnd
		float dofFarStart 	= file.presentationData[ presentationType ].dofFarStart
		float dofFarEnd 	= file.presentationData[ presentationType ].dofFarEnd

		if ( interpolate )
			printt( "Interpolating menu camera to:", Dev_GetEnumString( ePresentationType, presentationType ) )
		else
			printt( "Snapping menu camera to:", Dev_GetEnumString( ePresentationType, presentationType ) )

		if ( interpolate )
		{
			DoF_LerpNearDepth( dofNearStart, dofNearEnd, TRANSITION_DURATION )
			DoF_LerpFarDepth( dofFarStart, dofFarEnd, TRANSITION_DURATION )
		}
		else
		{
			DoF_SetNearDepth( dofNearStart, dofNearEnd )
			DoF_SetFarDepth( dofFarStart, dofFarEnd )
		}

		DoFSetDilateInfocus( true ) // We want to reduce DoF aliasing around bright edges in the menus.

#if CONSOLE_PROG
		const float texelNorm = 2.0
#else
		const float texelNorm = 1.0
#endif

		float csmTexelScale1	= file.presentationData[ presentationType ].csmTexelScale1 * texelNorm
		float csmTexelScale2	= file.presentationData[ presentationType ].csmTexelScale2 * texelNorm
		float csmStartDistance	= file.presentationData[ presentationType ].csmStartDistance

		// Tweaks in order to maximize the shadow space usage for the pilot and/or the titan.
		// Used the convar csm_debug_2d to find the best values on PC.
		SetMapSetting_CsmTexelScale( csmTexelScale1, csmTexelScale2 )
		SetMapSetting_CsmStartDistance( csmStartDistance )
	}

	void function ModelRotationThread()
	{
		for ( ;; )
		{
			WaitFrame()

			if ( file.activeCharacter == null )
				continue

			CharacterData character = expect CharacterData( file.activeCharacter )
			float rotationDelta

			if ( IsControllerModeActive() )
			{
				const float STICK_DEADZONE = 0.05
				float stickXRaw = clamp( InputGetAxis( ANALOG_RIGHT_X ), -1.0, 1.0 )
				float stickXRemappedAbs = (fabs( stickXRaw ) < STICK_DEADZONE) ? 0.0 : ((fabs( stickXRaw ) - STICK_DEADZONE) / (1.0 - STICK_DEADZONE))
				float stickX = EaseIn( stickXRemappedAbs ) * (stickXRaw < 0.0 ? -1.0 : 1.0)

				rotationDelta = ((character.rotationDelta + stickX * character.maxTurnSpeed * FrameTime()) % 360.0)
			}
			else
			{
				rotationDelta = ((character.rotationDelta + file.mouseRotateDelta * FrameTime()) % 360.0)
				file.mouseRotateDelta = 0 // clear because otherwise it would keep spinning
			}

			float maxTurnDegrees = file.presentationData[ file.presentationType ].maxTurnDegrees
			if ( maxTurnDegrees < 360.0 )
			{
				float minRotationDelta = 0 - (maxTurnDegrees / 2)
				float maxRotationDelta = maxTurnDegrees / 2
				rotationDelta = clamp( rotationDelta, minRotationDelta, maxRotationDelta )
			}

			character.rotationDelta = rotationDelta

			vector defaultAngles = clGlobal.menuSceneModel.GetAttachmentAngles( clGlobal.menuSceneModel.LookupAttachment( character.attachName ) )
			vector newAng = <defaultAngles.x, defaultAngles.y + character.rotationDelta, defaultAngles.z>
			character.mover.SetAngles( newAng )
		}
	}

	void function ResetCharacterRotation( CharacterData character )
	{
		entity mover = character.mover
		vector defaultAngles = clGlobal.menuSceneModel.GetAttachmentAngles( clGlobal.menuSceneModel.LookupAttachment( character.attachName ) )
		vector currentAngles = mover.GetAngles()
		character.rotationDelta = 0.0

		if ( currentAngles == defaultAngles )
			return

		// Get the reset time for the degrees we need to turn to get back to defaultAngles based on a maxDuration time for the worst case which is 180 degrees
		float absNormDeg = fabs( currentAngles.y - defaultAngles.y % 360.0 )
		float diffDeg = min( 360.0 - absNormDeg, absNormDeg )
		float maxDuration = 0.5
		float duration = diffDeg * (maxDuration / 180)
		float easeTime = duration / 3

		if ( duration > 0 )
			mover.NonPhysicsRotateTo( defaultAngles, duration, easeTime, easeTime )
		else
			mover.SetAngles( defaultAngles )
	}

	void function SetMenuOpenState( entity player, int state )
	{
		bool wasSoloDialogMenuOpen = clGlobal.isSoloDialogMenuOpen

		clGlobal.isMenuOpen = (state == 1)
		clGlobal.isSoloDialogMenuOpen = (state == 2);
		if ( clGlobal.isSoloDialogMenuOpen != wasSoloDialogMenuOpen )
			UpdateMainHudVisibility( player )

		if ( clGlobal.mapSupportsMenuModels && IsMultiplayer() && !IsLobby() )
		{
			if ( clGlobal.isMenuOpen )
			{
				ColorCorrection_SetExclusive( file.menuColorCorrection, true )
				ColorCorrection_SetWeight( file.menuColorCorrection, 1.0 )

				SetMapSetting_FogEnabled( false )
			}
			else
			{
				DoF_SetNearDepthToDefault()
				DoF_SetFarDepthToDefault()
				DoFSetDilateInfocus( false );

				ColorCorrection_SetWeight( file.menuColorCorrection, 0.0 )
				ColorCorrection_SetExclusive( file.menuColorCorrection, false )

				SetMapSetting_FogEnabled( true )
			}
		}
	}

	void function UpdateMouseRotateDelta( entity player, float delta )
	{
		file.mouseRotateDelta = delta
	}
#endif // CLIENT

#if UI
	void function RunMenuClientFunction( string func, var arg1 = null, var arg2 = null, var arg3 = null )
	{
		if ( !CanRunClientScript() || !uiGlobal.mapSupportsMenuModels )
			return

		if ( arg1 == null )
			RunClientScript( func, GetLocalClientPlayer() )
		else if ( arg2 == null )
			RunClientScript( func, GetLocalClientPlayer(), arg1 )
		else if ( arg3 == null )
			RunClientScript( func, GetLocalClientPlayer(), arg1, arg2 )
		else
			RunClientScript( func, GetLocalClientPlayer(), arg1, arg2, arg3 )
	}

	void function UI_SetPresentationType( int newPresentationType )
	{
		if ( IsFullyConnected() && uiGlobal.mapSupportsMenuModels )
		{
			if ( uiGlobal.activePresentationType == ePresentationType.NO_MODELS || newPresentationType == ePresentationType.NO_MODELS ||
				 uiGlobal.activePresentationType == ePresentationType.FACTIONS || newPresentationType == ePresentationType.FACTIONS ||
				 uiGlobal.activePresentationType == ePresentationType.BOOSTS || newPresentationType == ePresentationType.BOOSTS ||
				 uiGlobal.activePresentationType == ePresentationType.STORE_FRONT || newPresentationType == ePresentationType.STORE_FRONT ||
				 uiGlobal.activePresentationType == ePresentationType.PVE_MAIN || newPresentationType == ePresentationType.PVE_MAIN ||
				 uiGlobal.activePresentationType == ePresentationType.INACTIVE )
			{
				uiGlobal.interpolateCameraMoves = false
			}
			else
			{
				uiGlobal.interpolateCameraMoves = true
			}

			// When loading the lobby we don't want any interpolation
			if ( uiGlobal.lobbyFromLoadingScreen )
			{
				uiGlobal.interpolateCameraMoves = false
				uiGlobal.lobbyFromLoadingScreen	= false
			}

			RunClientScript( "SetPresentationType", GetLocalClientPlayer(), newPresentationType, uiGlobal.interpolateCameraMoves )

			uiGlobal.activePresentationType = newPresentationType
		}
	}

	void function UICodeCallback_MouseMovementCapture( var capturePanel, int deltaX, int deltaY )
	{
		float screenScaleModifier = 1920.0 / GetScreenSize()[0] // 1920 is base screen width
		float mouseRotateDelta = deltaX * screenScaleModifier * MOUSE_ROTATE_MULTIPLIER
		//printt( "deltaX:", deltaX, "screenScaleModifier:", screenScaleModifier, "mouseRotateDelta:", mouseRotateDelta )

		RunMenuClientFunction( "UpdateMouseRotateDelta", mouseRotateDelta )
	}
#endif // UI
